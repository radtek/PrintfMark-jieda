/* soapBarcodePrintServiceSoap11BindingProxy.h
   Generated by gSOAP 2.8.22 from BarcodePrintService.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapBarcodePrintServiceSoap11BindingProxy_H
#define soapBarcodePrintServiceSoap11BindingProxy_H
#include "soapH.h"

class SOAP_CMAC BarcodePrintServiceSoap11BindingProxy
{ public:
	struct soap *soap;
	bool soap_own;
	/// Endpoint URL of service 'BarcodePrintServiceSoap11BindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Variables globally declared in BarcodePrintService.h (non-static)
	/// Constructor
	BarcodePrintServiceSoap11BindingProxy();
	/// Constructor to use/share an engine state
	BarcodePrintServiceSoap11BindingProxy(struct soap*);
	/// Constructor with endpoint URL
	BarcodePrintServiceSoap11BindingProxy(const char *url);
	/// Constructor with engine input+output mode control
	BarcodePrintServiceSoap11BindingProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	BarcodePrintServiceSoap11BindingProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	BarcodePrintServiceSoap11BindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~BarcodePrintServiceSoap11BindingProxy();
	/// Initializer used by constructors
	virtual	void BarcodePrintServiceSoap11BindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'FinishPrintInfo' (returns error code or SOAP_OK)
	virtual	int FinishPrintInfo(_ns1__FinishPrintInfo *ns1__FinishPrintInfo, _ns1__FinishPrintInfoResponse &ns1__FinishPrintInfoResponse) { return this->FinishPrintInfo(NULL, NULL, ns1__FinishPrintInfo, ns1__FinishPrintInfoResponse); }
	virtual	int FinishPrintInfo(const char *endpoint, const char *soap_action, _ns1__FinishPrintInfo *ns1__FinishPrintInfo, _ns1__FinishPrintInfoResponse &ns1__FinishPrintInfoResponse);

	/// Web service operation 'GetTime' (returns error code or SOAP_OK)
	virtual	int GetTime(_ns1__GetTime *ns1__GetTime, _ns1__GetTimeResponse &ns1__GetTimeResponse) { return this->GetTime(NULL, NULL, ns1__GetTime, ns1__GetTimeResponse); }
	virtual	int GetTime(const char *endpoint, const char *soap_action, _ns1__GetTime *ns1__GetTime, _ns1__GetTimeResponse &ns1__GetTimeResponse);

	/// Web service operation 'FinishPrintInfo' (returns error code or SOAP_OK)
	virtual	int FinishPrintInfo_(_ns1__FinishPrintInfo *ns1__FinishPrintInfo, _ns1__FinishPrintInfoResponse &ns1__FinishPrintInfoResponse) { return this->FinishPrintInfo_(NULL, NULL, ns1__FinishPrintInfo, ns1__FinishPrintInfoResponse); }
	virtual	int FinishPrintInfo_(const char *endpoint, const char *soap_action, _ns1__FinishPrintInfo *ns1__FinishPrintInfo, _ns1__FinishPrintInfoResponse &ns1__FinishPrintInfoResponse);

	/// Web service operation 'GetTime' (returns error code or SOAP_OK)
	virtual	int GetTime_(_ns1__GetTime *ns1__GetTime, _ns1__GetTimeResponse &ns1__GetTimeResponse) { return this->GetTime_(NULL, NULL, ns1__GetTime, ns1__GetTimeResponse); }
	virtual	int GetTime_(const char *endpoint, const char *soap_action, _ns1__GetTime *ns1__GetTime, _ns1__GetTimeResponse &ns1__GetTimeResponse);
};
#endif
