/* soapBasicHttpBinding_USCOREIFoxlinkAddService.h
   Generated by gSOAP 2.8.22 from foxlinkadd.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapBasicHttpBinding_USCOREIFoxlinkAddService_H
#define soapBasicHttpBinding_USCOREIFoxlinkAddService_H
#include "soapH.h"
class SOAP_CMAC BasicHttpBinding_USCOREIFoxlinkAddService
{ public:
	struct soap *soap;
	bool soap_own;
	/// Variables globally declared in foxlinkadd.h (non-static)
	/// Constructor
	BasicHttpBinding_USCOREIFoxlinkAddService();
	/// Constructor to use/share an engine state
	BasicHttpBinding_USCOREIFoxlinkAddService(struct soap*);
	/// Constructor with engine input+output mode control
	BasicHttpBinding_USCOREIFoxlinkAddService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	BasicHttpBinding_USCOREIFoxlinkAddService(soap_mode imode, soap_mode omode);
	/// Destructor, also frees all deserialized data
	virtual ~BasicHttpBinding_USCOREIFoxlinkAddService();
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to defaults
	virtual	void reset();
	/// Initializer used by constructor
	virtual	void BasicHttpBinding_USCOREIFoxlinkAddService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	BasicHttpBinding_USCOREIFoxlinkAddService *copy() SOAP_PURE_VIRTUAL;
	/// Close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Run simple single-thread (iterative, non-SSL) service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
	/// Then accept SSL handshake, when SSL is used
	virtual	int ssl_accept();
#endif
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error or SOAP_OK)
	virtual	int dispatch();
	virtual	int dispatch(struct soap *soap);

	///
	/// Service operations (you should define these):
	/// Note: compile with -DWITH_PURE_VIRTUAL for pure virtual methods
	///

	/// Web service operation 'CheckRuleSN' (returns error code or SOAP_OK)
	virtual	int CheckRuleSN(_tempuri__CheckRuleSN *tempuri__CheckRuleSN, _tempuri__CheckRuleSNResponse &tempuri__CheckRuleSNResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'COMMAND_CODE' (returns error code or SOAP_OK)
	virtual	int COMMAND_USCORECODE(_tempuri__COMMAND_USCORECODE *tempuri__COMMAND_USCORECODE, _tempuri__COMMAND_USCORECODEResponse &tempuri__COMMAND_USCORECODEResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'UpdateSMTSteelNet' (returns error code or SOAP_OK)
	virtual	int UpdateSMTSteelNet(_tempuri__UpdateSMTSteelNet *tempuri__UpdateSMTSteelNet, _tempuri__UpdateSMTSteelNetResponse &tempuri__UpdateSMTSteelNetResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'UpdateSMTSteelNet2' (returns error code or SOAP_OK)
	virtual	int UpdateSMTSteelNet2(_tempuri__UpdateSMTSteelNet2 *tempuri__UpdateSMTSteelNet2, _tempuri__UpdateSMTSteelNet2Response &tempuri__UpdateSMTSteelNet2Response) SOAP_PURE_VIRTUAL;

	/// Web service operation 'BatchBack' (returns error code or SOAP_OK)
	virtual	int BatchBack(_tempuri__BatchBack *tempuri__BatchBack, _tempuri__BatchBackResponse &tempuri__BatchBackResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'saveSingleReworkResult' (returns error code or SOAP_OK)
	virtual	int saveSingleReworkResult(_tempuri__saveSingleReworkResult *tempuri__saveSingleReworkResult, _tempuri__saveSingleReworkResultResponse &tempuri__saveSingleReworkResultResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'Check_Login' (returns error code or SOAP_OK)
	virtual	int Check_USCORELogin(_tempuri__Check_USCORELogin *tempuri__Check_USCORELogin, _tempuri__Check_USCORELoginResponse &tempuri__Check_USCORELoginResponse) SOAP_PURE_VIRTUAL;

	/// Web service operation 'SaveTestData' (returns error code or SOAP_OK)
	virtual	int SaveTestData(_tempuri__SaveTestData *tempuri__SaveTestData, _tempuri__SaveTestDataResponse &tempuri__SaveTestDataResponse) SOAP_PURE_VIRTUAL;
};
#endif
