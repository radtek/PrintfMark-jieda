/* soapBasicHttpBinding_USCOREIFoxlinkAddProxy.h
   Generated by gSOAP 2.8.22 from foxlinkadd.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapBasicHttpBinding_USCOREIFoxlinkAddProxy_H
#define soapBasicHttpBinding_USCOREIFoxlinkAddProxy_H
#include "soapH.h"

class SOAP_CMAC BasicHttpBinding_USCOREIFoxlinkAddProxy
{ public:
	struct soap *soap;
	bool soap_own;
	/// Endpoint URL of service 'BasicHttpBinding_USCOREIFoxlinkAddProxy' (change as needed)
	const char *soap_endpoint;
	/// Variables globally declared in foxlinkadd.h (non-static)
	/// Constructor
	BasicHttpBinding_USCOREIFoxlinkAddProxy();
	/// Constructor to use/share an engine state
	BasicHttpBinding_USCOREIFoxlinkAddProxy(struct soap*);
	/// Constructor with endpoint URL
	BasicHttpBinding_USCOREIFoxlinkAddProxy(const char *url);
	/// Constructor with engine input+output mode control
	BasicHttpBinding_USCOREIFoxlinkAddProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	BasicHttpBinding_USCOREIFoxlinkAddProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	BasicHttpBinding_USCOREIFoxlinkAddProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~BasicHttpBinding_USCOREIFoxlinkAddProxy();
	/// Initializer used by constructors
	virtual	void BasicHttpBinding_USCOREIFoxlinkAddProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'CheckRuleSN' (returns error code or SOAP_OK)
	virtual	int CheckRuleSN(_tempuri__CheckRuleSN *tempuri__CheckRuleSN, _tempuri__CheckRuleSNResponse &tempuri__CheckRuleSNResponse) { return this->CheckRuleSN(NULL, NULL, tempuri__CheckRuleSN, tempuri__CheckRuleSNResponse); }
	virtual	int CheckRuleSN(const char *endpoint, const char *soap_action, _tempuri__CheckRuleSN *tempuri__CheckRuleSN, _tempuri__CheckRuleSNResponse &tempuri__CheckRuleSNResponse);

	/// Web service operation 'COMMAND_CODE' (returns error code or SOAP_OK)
	virtual	int COMMAND_USCORECODE(_tempuri__COMMAND_USCORECODE *tempuri__COMMAND_USCORECODE, _tempuri__COMMAND_USCORECODEResponse &tempuri__COMMAND_USCORECODEResponse) { return this->COMMAND_USCORECODE(NULL, NULL, tempuri__COMMAND_USCORECODE, tempuri__COMMAND_USCORECODEResponse); }
	virtual	int COMMAND_USCORECODE(const char *endpoint, const char *soap_action, _tempuri__COMMAND_USCORECODE *tempuri__COMMAND_USCORECODE, _tempuri__COMMAND_USCORECODEResponse &tempuri__COMMAND_USCORECODEResponse);

	/// Web service operation 'UpdateSMTSteelNet' (returns error code or SOAP_OK)
	virtual	int UpdateSMTSteelNet(_tempuri__UpdateSMTSteelNet *tempuri__UpdateSMTSteelNet, _tempuri__UpdateSMTSteelNetResponse &tempuri__UpdateSMTSteelNetResponse) { return this->UpdateSMTSteelNet(NULL, NULL, tempuri__UpdateSMTSteelNet, tempuri__UpdateSMTSteelNetResponse); }
	virtual	int UpdateSMTSteelNet(const char *endpoint, const char *soap_action, _tempuri__UpdateSMTSteelNet *tempuri__UpdateSMTSteelNet, _tempuri__UpdateSMTSteelNetResponse &tempuri__UpdateSMTSteelNetResponse);

	/// Web service operation 'UpdateSMTSteelNet2' (returns error code or SOAP_OK)
	virtual	int UpdateSMTSteelNet2(_tempuri__UpdateSMTSteelNet2 *tempuri__UpdateSMTSteelNet2, _tempuri__UpdateSMTSteelNet2Response &tempuri__UpdateSMTSteelNet2Response) { return this->UpdateSMTSteelNet2(NULL, NULL, tempuri__UpdateSMTSteelNet2, tempuri__UpdateSMTSteelNet2Response); }
	virtual	int UpdateSMTSteelNet2(const char *endpoint, const char *soap_action, _tempuri__UpdateSMTSteelNet2 *tempuri__UpdateSMTSteelNet2, _tempuri__UpdateSMTSteelNet2Response &tempuri__UpdateSMTSteelNet2Response);

	/// Web service operation 'BatchBack' (returns error code or SOAP_OK)
	virtual	int BatchBack(_tempuri__BatchBack *tempuri__BatchBack, _tempuri__BatchBackResponse &tempuri__BatchBackResponse) { return this->BatchBack(NULL, NULL, tempuri__BatchBack, tempuri__BatchBackResponse); }
	virtual	int BatchBack(const char *endpoint, const char *soap_action, _tempuri__BatchBack *tempuri__BatchBack, _tempuri__BatchBackResponse &tempuri__BatchBackResponse);

	/// Web service operation 'saveSingleReworkResult' (returns error code or SOAP_OK)
	virtual	int saveSingleReworkResult(_tempuri__saveSingleReworkResult *tempuri__saveSingleReworkResult, _tempuri__saveSingleReworkResultResponse &tempuri__saveSingleReworkResultResponse) { return this->saveSingleReworkResult(NULL, NULL, tempuri__saveSingleReworkResult, tempuri__saveSingleReworkResultResponse); }
	virtual	int saveSingleReworkResult(const char *endpoint, const char *soap_action, _tempuri__saveSingleReworkResult *tempuri__saveSingleReworkResult, _tempuri__saveSingleReworkResultResponse &tempuri__saveSingleReworkResultResponse);

	/// Web service operation 'Check_Login' (returns error code or SOAP_OK)
	virtual	int Check_USCORELogin(_tempuri__Check_USCORELogin *tempuri__Check_USCORELogin, _tempuri__Check_USCORELoginResponse &tempuri__Check_USCORELoginResponse) { return this->Check_USCORELogin(NULL, NULL, tempuri__Check_USCORELogin, tempuri__Check_USCORELoginResponse); }
	virtual	int Check_USCORELogin(const char *endpoint, const char *soap_action, _tempuri__Check_USCORELogin *tempuri__Check_USCORELogin, _tempuri__Check_USCORELoginResponse &tempuri__Check_USCORELoginResponse);

	/// Web service operation 'SaveTestData' (returns error code or SOAP_OK)
	virtual	int SaveTestData(_tempuri__SaveTestData *tempuri__SaveTestData, _tempuri__SaveTestDataResponse &tempuri__SaveTestDataResponse) { return this->SaveTestData(NULL, NULL, tempuri__SaveTestData, tempuri__SaveTestDataResponse); }
	virtual	int SaveTestData(const char *endpoint, const char *soap_action, _tempuri__SaveTestData *tempuri__SaveTestData, _tempuri__SaveTestDataResponse &tempuri__SaveTestDataResponse);
};
#endif
