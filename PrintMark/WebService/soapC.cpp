/* soapC.cpp
   Generated by gSOAP 2.8.22 from foxlinkadd.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.22 2017-07-17 01:52:50 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_tempuri__SaveTestData:
		return soap_in_PointerTo_tempuri__SaveTestData(soap, NULL, NULL, "tempuri:SaveTestData");
	case SOAP_TYPE_PointerTo_tempuri__Check_USCORELogin:
		return soap_in_PointerTo_tempuri__Check_USCORELogin(soap, NULL, NULL, "tempuri:Check_Login");
	case SOAP_TYPE_PointerTo_tempuri__saveSingleReworkResult:
		return soap_in_PointerTo_tempuri__saveSingleReworkResult(soap, NULL, NULL, "tempuri:saveSingleReworkResult");
	case SOAP_TYPE_PointerTo_tempuri__BatchBack:
		return soap_in_PointerTo_tempuri__BatchBack(soap, NULL, NULL, "tempuri:BatchBack");
	case SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet2:
		return soap_in_PointerTo_tempuri__UpdateSMTSteelNet2(soap, NULL, NULL, "tempuri:UpdateSMTSteelNet2");
	case SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet:
		return soap_in_PointerTo_tempuri__UpdateSMTSteelNet(soap, NULL, NULL, "tempuri:UpdateSMTSteelNet");
	case SOAP_TYPE_PointerTo_tempuri__COMMAND_USCORECODE:
		return soap_in_PointerTo_tempuri__COMMAND_USCORECODE(soap, NULL, NULL, "tempuri:COMMAND_CODE");
	case SOAP_TYPE_PointerTo_tempuri__CheckRuleSN:
		return soap_in_PointerTo_tempuri__CheckRuleSN(soap, NULL, NULL, "tempuri:CheckRuleSN");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "tempuri:SaveTestDataResponse"))
		{	*type = SOAP_TYPE__tempuri__SaveTestDataResponse;
			return soap_in__tempuri__SaveTestDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SaveTestData"))
		{	*type = SOAP_TYPE__tempuri__SaveTestData;
			return soap_in__tempuri__SaveTestData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Check_LoginResponse"))
		{	*type = SOAP_TYPE__tempuri__Check_USCORELoginResponse;
			return soap_in__tempuri__Check_USCORELoginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Check_Login"))
		{	*type = SOAP_TYPE__tempuri__Check_USCORELogin;
			return soap_in__tempuri__Check_USCORELogin(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:saveSingleReworkResultResponse"))
		{	*type = SOAP_TYPE__tempuri__saveSingleReworkResultResponse;
			return soap_in__tempuri__saveSingleReworkResultResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:saveSingleReworkResult"))
		{	*type = SOAP_TYPE__tempuri__saveSingleReworkResult;
			return soap_in__tempuri__saveSingleReworkResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:BatchBackResponse"))
		{	*type = SOAP_TYPE__tempuri__BatchBackResponse;
			return soap_in__tempuri__BatchBackResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:BatchBack"))
		{	*type = SOAP_TYPE__tempuri__BatchBack;
			return soap_in__tempuri__BatchBack(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:UpdateSMTSteelNet2Response"))
		{	*type = SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response;
			return soap_in__tempuri__UpdateSMTSteelNet2Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:UpdateSMTSteelNet2"))
		{	*type = SOAP_TYPE__tempuri__UpdateSMTSteelNet2;
			return soap_in__tempuri__UpdateSMTSteelNet2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:UpdateSMTSteelNetResponse"))
		{	*type = SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse;
			return soap_in__tempuri__UpdateSMTSteelNetResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:UpdateSMTSteelNet"))
		{	*type = SOAP_TYPE__tempuri__UpdateSMTSteelNet;
			return soap_in__tempuri__UpdateSMTSteelNet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:COMMAND_CODEResponse"))
		{	*type = SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse;
			return soap_in__tempuri__COMMAND_USCORECODEResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:COMMAND_CODE"))
		{	*type = SOAP_TYPE__tempuri__COMMAND_USCORECODE;
			return soap_in__tempuri__COMMAND_USCORECODE(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:CheckRuleSNResponse"))
		{	*type = SOAP_TYPE__tempuri__CheckRuleSNResponse;
			return soap_in__tempuri__CheckRuleSNResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:CheckRuleSN"))
		{	*type = SOAP_TYPE__tempuri__CheckRuleSN;
			return soap_in__tempuri__CheckRuleSN(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__tempuri__SaveTestDataResponse:
		return ((_tempuri__SaveTestDataResponse *)ptr)->soap_out(soap, "tempuri:SaveTestDataResponse", id, NULL);
	case SOAP_TYPE__tempuri__SaveTestData:
		return ((_tempuri__SaveTestData *)ptr)->soap_out(soap, "tempuri:SaveTestData", id, NULL);
	case SOAP_TYPE__tempuri__Check_USCORELoginResponse:
		return ((_tempuri__Check_USCORELoginResponse *)ptr)->soap_out(soap, "tempuri:Check_LoginResponse", id, NULL);
	case SOAP_TYPE__tempuri__Check_USCORELogin:
		return ((_tempuri__Check_USCORELogin *)ptr)->soap_out(soap, "tempuri:Check_Login", id, NULL);
	case SOAP_TYPE__tempuri__saveSingleReworkResultResponse:
		return ((_tempuri__saveSingleReworkResultResponse *)ptr)->soap_out(soap, "tempuri:saveSingleReworkResultResponse", id, NULL);
	case SOAP_TYPE__tempuri__saveSingleReworkResult:
		return ((_tempuri__saveSingleReworkResult *)ptr)->soap_out(soap, "tempuri:saveSingleReworkResult", id, NULL);
	case SOAP_TYPE__tempuri__BatchBackResponse:
		return ((_tempuri__BatchBackResponse *)ptr)->soap_out(soap, "tempuri:BatchBackResponse", id, NULL);
	case SOAP_TYPE__tempuri__BatchBack:
		return ((_tempuri__BatchBack *)ptr)->soap_out(soap, "tempuri:BatchBack", id, NULL);
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response:
		return ((_tempuri__UpdateSMTSteelNet2Response *)ptr)->soap_out(soap, "tempuri:UpdateSMTSteelNet2Response", id, NULL);
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet2:
		return ((_tempuri__UpdateSMTSteelNet2 *)ptr)->soap_out(soap, "tempuri:UpdateSMTSteelNet2", id, NULL);
	case SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse:
		return ((_tempuri__UpdateSMTSteelNetResponse *)ptr)->soap_out(soap, "tempuri:UpdateSMTSteelNetResponse", id, NULL);
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet:
		return ((_tempuri__UpdateSMTSteelNet *)ptr)->soap_out(soap, "tempuri:UpdateSMTSteelNet", id, NULL);
	case SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse:
		return ((_tempuri__COMMAND_USCORECODEResponse *)ptr)->soap_out(soap, "tempuri:COMMAND_CODEResponse", id, NULL);
	case SOAP_TYPE__tempuri__COMMAND_USCORECODE:
		return ((_tempuri__COMMAND_USCORECODE *)ptr)->soap_out(soap, "tempuri:COMMAND_CODE", id, NULL);
	case SOAP_TYPE__tempuri__CheckRuleSNResponse:
		return ((_tempuri__CheckRuleSNResponse *)ptr)->soap_out(soap, "tempuri:CheckRuleSNResponse", id, NULL);
	case SOAP_TYPE__tempuri__CheckRuleSN:
		return ((_tempuri__CheckRuleSN *)ptr)->soap_out(soap, "tempuri:CheckRuleSN", id, NULL);
	case SOAP_TYPE_PointerTo_tempuri__SaveTestData:
		return soap_out_PointerTo_tempuri__SaveTestData(soap, tag, id, (_tempuri__SaveTestData *const*)ptr, "tempuri:SaveTestData");
	case SOAP_TYPE_PointerTo_tempuri__Check_USCORELogin:
		return soap_out_PointerTo_tempuri__Check_USCORELogin(soap, tag, id, (_tempuri__Check_USCORELogin *const*)ptr, "tempuri:Check_Login");
	case SOAP_TYPE_PointerTo_tempuri__saveSingleReworkResult:
		return soap_out_PointerTo_tempuri__saveSingleReworkResult(soap, tag, id, (_tempuri__saveSingleReworkResult *const*)ptr, "tempuri:saveSingleReworkResult");
	case SOAP_TYPE_PointerTo_tempuri__BatchBack:
		return soap_out_PointerTo_tempuri__BatchBack(soap, tag, id, (_tempuri__BatchBack *const*)ptr, "tempuri:BatchBack");
	case SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet2:
		return soap_out_PointerTo_tempuri__UpdateSMTSteelNet2(soap, tag, id, (_tempuri__UpdateSMTSteelNet2 *const*)ptr, "tempuri:UpdateSMTSteelNet2");
	case SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet:
		return soap_out_PointerTo_tempuri__UpdateSMTSteelNet(soap, tag, id, (_tempuri__UpdateSMTSteelNet *const*)ptr, "tempuri:UpdateSMTSteelNet");
	case SOAP_TYPE_PointerTo_tempuri__COMMAND_USCORECODE:
		return soap_out_PointerTo_tempuri__COMMAND_USCORECODE(soap, tag, id, (_tempuri__COMMAND_USCORECODE *const*)ptr, "tempuri:COMMAND_CODE");
	case SOAP_TYPE_PointerTo_tempuri__CheckRuleSN:
		return soap_out_PointerTo_tempuri__CheckRuleSN(soap, tag, id, (_tempuri__CheckRuleSN *const*)ptr, "tempuri:CheckRuleSN");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__tempuri__SaveTestDataResponse:
		((_tempuri__SaveTestDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SaveTestData:
		((_tempuri__SaveTestData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Check_USCORELoginResponse:
		((_tempuri__Check_USCORELoginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Check_USCORELogin:
		((_tempuri__Check_USCORELogin *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__saveSingleReworkResultResponse:
		((_tempuri__saveSingleReworkResultResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__saveSingleReworkResult:
		((_tempuri__saveSingleReworkResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__BatchBackResponse:
		((_tempuri__BatchBackResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__BatchBack:
		((_tempuri__BatchBack *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response:
		((_tempuri__UpdateSMTSteelNet2Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet2:
		((_tempuri__UpdateSMTSteelNet2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse:
		((_tempuri__UpdateSMTSteelNetResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet:
		((_tempuri__UpdateSMTSteelNet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse:
		((_tempuri__COMMAND_USCORECODEResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__COMMAND_USCORECODE:
		((_tempuri__COMMAND_USCORECODE *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__CheckRuleSNResponse:
		((_tempuri__CheckRuleSNResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__CheckRuleSN:
		((_tempuri__CheckRuleSN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___tempuri__SaveTestData:
		soap_serialize___tempuri__SaveTestData(soap, (const struct __tempuri__SaveTestData *)ptr);
		break;
	case SOAP_TYPE___tempuri__Check_USCORELogin:
		soap_serialize___tempuri__Check_USCORELogin(soap, (const struct __tempuri__Check_USCORELogin *)ptr);
		break;
	case SOAP_TYPE___tempuri__saveSingleReworkResult:
		soap_serialize___tempuri__saveSingleReworkResult(soap, (const struct __tempuri__saveSingleReworkResult *)ptr);
		break;
	case SOAP_TYPE___tempuri__BatchBack:
		soap_serialize___tempuri__BatchBack(soap, (const struct __tempuri__BatchBack *)ptr);
		break;
	case SOAP_TYPE___tempuri__UpdateSMTSteelNet2:
		soap_serialize___tempuri__UpdateSMTSteelNet2(soap, (const struct __tempuri__UpdateSMTSteelNet2 *)ptr);
		break;
	case SOAP_TYPE___tempuri__UpdateSMTSteelNet:
		soap_serialize___tempuri__UpdateSMTSteelNet(soap, (const struct __tempuri__UpdateSMTSteelNet *)ptr);
		break;
	case SOAP_TYPE___tempuri__COMMAND_USCORECODE:
		soap_serialize___tempuri__COMMAND_USCORECODE(soap, (const struct __tempuri__COMMAND_USCORECODE *)ptr);
		break;
	case SOAP_TYPE___tempuri__CheckRuleSN:
		soap_serialize___tempuri__CheckRuleSN(soap, (const struct __tempuri__CheckRuleSN *)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__SaveTestData:
		soap_serialize_PointerTo_tempuri__SaveTestData(soap, (_tempuri__SaveTestData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Check_USCORELogin:
		soap_serialize_PointerTo_tempuri__Check_USCORELogin(soap, (_tempuri__Check_USCORELogin *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__saveSingleReworkResult:
		soap_serialize_PointerTo_tempuri__saveSingleReworkResult(soap, (_tempuri__saveSingleReworkResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__BatchBack:
		soap_serialize_PointerTo_tempuri__BatchBack(soap, (_tempuri__BatchBack *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet2:
		soap_serialize_PointerTo_tempuri__UpdateSMTSteelNet2(soap, (_tempuri__UpdateSMTSteelNet2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet:
		soap_serialize_PointerTo_tempuri__UpdateSMTSteelNet(soap, (_tempuri__UpdateSMTSteelNet *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__COMMAND_USCORECODE:
		soap_serialize_PointerTo_tempuri__COMMAND_USCORECODE(soap, (_tempuri__COMMAND_USCORECODE *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__CheckRuleSN:
		soap_serialize_PointerTo_tempuri__CheckRuleSN(soap, (_tempuri__CheckRuleSN *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__CheckRuleSN:
		return (void*)soap_instantiate__tempuri__CheckRuleSN(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__CheckRuleSNResponse:
		return (void*)soap_instantiate__tempuri__CheckRuleSNResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__COMMAND_USCORECODE:
		return (void*)soap_instantiate__tempuri__COMMAND_USCORECODE(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse:
		return (void*)soap_instantiate__tempuri__COMMAND_USCORECODEResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet:
		return (void*)soap_instantiate__tempuri__UpdateSMTSteelNet(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse:
		return (void*)soap_instantiate__tempuri__UpdateSMTSteelNetResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet2:
		return (void*)soap_instantiate__tempuri__UpdateSMTSteelNet2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response:
		return (void*)soap_instantiate__tempuri__UpdateSMTSteelNet2Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__BatchBack:
		return (void*)soap_instantiate__tempuri__BatchBack(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__BatchBackResponse:
		return (void*)soap_instantiate__tempuri__BatchBackResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__saveSingleReworkResult:
		return (void*)soap_instantiate__tempuri__saveSingleReworkResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__saveSingleReworkResultResponse:
		return (void*)soap_instantiate__tempuri__saveSingleReworkResultResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Check_USCORELogin:
		return (void*)soap_instantiate__tempuri__Check_USCORELogin(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Check_USCORELoginResponse:
		return (void*)soap_instantiate__tempuri__Check_USCORELoginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SaveTestData:
		return (void*)soap_instantiate__tempuri__SaveTestData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SaveTestDataResponse:
		return (void*)soap_instantiate__tempuri__SaveTestDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__CheckRuleSN:
		return (void*)soap_instantiate___tempuri__CheckRuleSN(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__COMMAND_USCORECODE:
		return (void*)soap_instantiate___tempuri__COMMAND_USCORECODE(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__UpdateSMTSteelNet:
		return (void*)soap_instantiate___tempuri__UpdateSMTSteelNet(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__UpdateSMTSteelNet2:
		return (void*)soap_instantiate___tempuri__UpdateSMTSteelNet2(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__BatchBack:
		return (void*)soap_instantiate___tempuri__BatchBack(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__saveSingleReworkResult:
		return (void*)soap_instantiate___tempuri__saveSingleReworkResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Check_USCORELogin:
		return (void*)soap_instantiate___tempuri__Check_USCORELogin(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__SaveTestData:
		return (void*)soap_instantiate___tempuri__SaveTestData(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__CheckRuleSN:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__CheckRuleSN*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__CheckRuleSN*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__CheckRuleSNResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__CheckRuleSNResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__CheckRuleSNResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__COMMAND_USCORECODE:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__COMMAND_USCORECODE*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__COMMAND_USCORECODE*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__COMMAND_USCORECODEResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__COMMAND_USCORECODEResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__UpdateSMTSteelNet*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__UpdateSMTSteelNet*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__UpdateSMTSteelNetResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__UpdateSMTSteelNetResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet2:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__UpdateSMTSteelNet2*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__UpdateSMTSteelNet2*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__UpdateSMTSteelNet2Response*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__UpdateSMTSteelNet2Response*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__BatchBack:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__BatchBack*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__BatchBack*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__BatchBackResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__BatchBackResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__BatchBackResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__saveSingleReworkResult:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__saveSingleReworkResult*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__saveSingleReworkResult*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__saveSingleReworkResultResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__saveSingleReworkResultResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__saveSingleReworkResultResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__Check_USCORELogin:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__Check_USCORELogin*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__Check_USCORELogin*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__Check_USCORELoginResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__Check_USCORELoginResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__Check_USCORELoginResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SaveTestData:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SaveTestData*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SaveTestData*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SaveTestDataResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SaveTestDataResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SaveTestDataResponse*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__CheckRuleSN:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__CheckRuleSN*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__CheckRuleSN*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__COMMAND_USCORECODE:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__COMMAND_USCORECODE*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__COMMAND_USCORECODE*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__UpdateSMTSteelNet:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__UpdateSMTSteelNet*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__UpdateSMTSteelNet*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__UpdateSMTSteelNet2:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__UpdateSMTSteelNet2*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__UpdateSMTSteelNet2*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__BatchBack:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__BatchBack*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__BatchBack*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__saveSingleReworkResult:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__saveSingleReworkResult*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__saveSingleReworkResult*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__Check_USCORELogin:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__Check_USCORELogin*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__Check_USCORELogin*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__SaveTestData:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__SaveTestData*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__SaveTestData*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _tempuri__SaveTestDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__SaveTestDataResponse::SaveTestDataResult = NULL;
	/* transient soap skipped */
}

void _tempuri__SaveTestDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__SaveTestDataResponse::SaveTestDataResult);
	/* transient soap skipped */
#endif
}

int _tempuri__SaveTestDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SaveTestDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SaveTestDataResponse(struct soap *soap, const char *tag, int id, const _tempuri__SaveTestDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SaveTestDataResponse), type))
		return soap->error;
	if (a->SaveTestDataResult)
		soap_element_result(soap, "tempuri:SaveTestDataResult");
	if (soap_out_PointerTostd__string(soap, "tempuri:SaveTestDataResult", -1, &(a->_tempuri__SaveTestDataResponse::SaveTestDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SaveTestDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SaveTestDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SaveTestDataResponse * SOAP_FMAC4 soap_in__tempuri__SaveTestDataResponse(struct soap *soap, const char *tag, _tempuri__SaveTestDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SaveTestDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SaveTestDataResponse, sizeof(_tempuri__SaveTestDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SaveTestDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SaveTestDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SaveTestDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SaveTestDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:SaveTestDataResult", &(a->_tempuri__SaveTestDataResponse::SaveTestDataResult), "xsd:string"))
				{	soap_flag_SaveTestDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:SaveTestDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SaveTestDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SaveTestDataResponse, 0, sizeof(_tempuri__SaveTestDataResponse), 0, soap_copy__tempuri__SaveTestDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SaveTestDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SaveTestDataResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:SaveTestDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SaveTestDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SaveTestDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SaveTestDataResponse * SOAP_FMAC4 soap_get__tempuri__SaveTestDataResponse(struct soap *soap, _tempuri__SaveTestDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SaveTestDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SaveTestDataResponse * SOAP_FMAC2 soap_instantiate__tempuri__SaveTestDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SaveTestDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SaveTestDataResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SaveTestDataResponse);
		if (size)
			*size = sizeof(_tempuri__SaveTestDataResponse);
		((_tempuri__SaveTestDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SaveTestDataResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__SaveTestDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SaveTestDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SaveTestDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SaveTestDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SaveTestDataResponse %p -> %p\n", q, p));
	*(_tempuri__SaveTestDataResponse*)p = *(_tempuri__SaveTestDataResponse*)q;
}

void _tempuri__SaveTestData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__SaveTestData::strData = NULL;
	/* transient soap skipped */
}

void _tempuri__SaveTestData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__SaveTestData::strData);
	/* transient soap skipped */
#endif
}

int _tempuri__SaveTestData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SaveTestData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SaveTestData(struct soap *soap, const char *tag, int id, const _tempuri__SaveTestData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SaveTestData), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:strData", -1, &(a->_tempuri__SaveTestData::strData), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SaveTestData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SaveTestData(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SaveTestData * SOAP_FMAC4 soap_in__tempuri__SaveTestData(struct soap *soap, const char *tag, _tempuri__SaveTestData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SaveTestData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SaveTestData, sizeof(_tempuri__SaveTestData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SaveTestData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SaveTestData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strData1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:strData", &(a->_tempuri__SaveTestData::strData), "xsd:string"))
				{	soap_flag_strData1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SaveTestData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SaveTestData, 0, sizeof(_tempuri__SaveTestData), 0, soap_copy__tempuri__SaveTestData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SaveTestData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SaveTestData);
	if (this->soap_out(soap, tag?tag:"tempuri:SaveTestData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SaveTestData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SaveTestData(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SaveTestData * SOAP_FMAC4 soap_get__tempuri__SaveTestData(struct soap *soap, _tempuri__SaveTestData *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SaveTestData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SaveTestData * SOAP_FMAC2 soap_instantiate__tempuri__SaveTestData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SaveTestData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SaveTestData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SaveTestData);
		if (size)
			*size = sizeof(_tempuri__SaveTestData);
		((_tempuri__SaveTestData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SaveTestData, n);
		if (size)
			*size = n * sizeof(_tempuri__SaveTestData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SaveTestData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SaveTestData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SaveTestData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SaveTestData %p -> %p\n", q, p));
	*(_tempuri__SaveTestData*)p = *(_tempuri__SaveTestData*)q;
}

void _tempuri__Check_USCORELoginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Check_USCORELoginResponse::Check_USCORELoginResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Check_USCORELoginResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__Check_USCORELoginResponse::Check_USCORELoginResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Check_USCORELoginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Check_USCORELoginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Check_USCORELoginResponse(struct soap *soap, const char *tag, int id, const _tempuri__Check_USCORELoginResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Check_USCORELoginResponse), type))
		return soap->error;
	if (a->Check_USCORELoginResult)
		soap_element_result(soap, "tempuri:Check_LoginResult");
	if (soap_out_PointerTostd__string(soap, "tempuri:Check_LoginResult", -1, &(a->_tempuri__Check_USCORELoginResponse::Check_USCORELoginResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Check_USCORELoginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Check_USCORELoginResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Check_USCORELoginResponse * SOAP_FMAC4 soap_in__tempuri__Check_USCORELoginResponse(struct soap *soap, const char *tag, _tempuri__Check_USCORELoginResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Check_USCORELoginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Check_USCORELoginResponse, sizeof(_tempuri__Check_USCORELoginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Check_USCORELoginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Check_USCORELoginResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Check_USCORELoginResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Check_USCORELoginResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:Check_LoginResult", &(a->_tempuri__Check_USCORELoginResponse::Check_USCORELoginResult), "xsd:string"))
				{	soap_flag_Check_USCORELoginResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Check_LoginResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Check_USCORELoginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Check_USCORELoginResponse, 0, sizeof(_tempuri__Check_USCORELoginResponse), 0, soap_copy__tempuri__Check_USCORELoginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Check_USCORELoginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__Check_USCORELoginResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Check_LoginResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Check_USCORELoginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Check_USCORELoginResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Check_USCORELoginResponse * SOAP_FMAC4 soap_get__tempuri__Check_USCORELoginResponse(struct soap *soap, _tempuri__Check_USCORELoginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Check_USCORELoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Check_USCORELoginResponse * SOAP_FMAC2 soap_instantiate__tempuri__Check_USCORELoginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Check_USCORELoginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Check_USCORELoginResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__Check_USCORELoginResponse);
		if (size)
			*size = sizeof(_tempuri__Check_USCORELoginResponse);
		((_tempuri__Check_USCORELoginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__Check_USCORELoginResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Check_USCORELoginResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Check_USCORELoginResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Check_USCORELoginResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Check_USCORELoginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Check_USCORELoginResponse %p -> %p\n", q, p));
	*(_tempuri__Check_USCORELoginResponse*)p = *(_tempuri__Check_USCORELoginResponse*)q;
}

void _tempuri__Check_USCORELogin::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Check_USCORELogin::strUser = NULL;
	this->_tempuri__Check_USCORELogin::strPwd = NULL;
	/* transient soap skipped */
}

void _tempuri__Check_USCORELogin::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__Check_USCORELogin::strUser);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__Check_USCORELogin::strPwd);
	/* transient soap skipped */
#endif
}

int _tempuri__Check_USCORELogin::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Check_USCORELogin(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Check_USCORELogin(struct soap *soap, const char *tag, int id, const _tempuri__Check_USCORELogin *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Check_USCORELogin), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:strUser", -1, &(a->_tempuri__Check_USCORELogin::strUser), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:strPwd", -1, &(a->_tempuri__Check_USCORELogin::strPwd), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Check_USCORELogin::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Check_USCORELogin(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Check_USCORELogin * SOAP_FMAC4 soap_in__tempuri__Check_USCORELogin(struct soap *soap, const char *tag, _tempuri__Check_USCORELogin *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Check_USCORELogin *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Check_USCORELogin, sizeof(_tempuri__Check_USCORELogin), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Check_USCORELogin)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Check_USCORELogin *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strUser1 = 1;
	size_t soap_flag_strPwd1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strUser1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:strUser", &(a->_tempuri__Check_USCORELogin::strUser), "xsd:string"))
				{	soap_flag_strUser1--;
					continue;
				}
			if (soap_flag_strPwd1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:strPwd", &(a->_tempuri__Check_USCORELogin::strPwd), "xsd:string"))
				{	soap_flag_strPwd1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Check_USCORELogin *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Check_USCORELogin, 0, sizeof(_tempuri__Check_USCORELogin), 0, soap_copy__tempuri__Check_USCORELogin);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Check_USCORELogin::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__Check_USCORELogin);
	if (this->soap_out(soap, tag?tag:"tempuri:Check_Login", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Check_USCORELogin::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Check_USCORELogin(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Check_USCORELogin * SOAP_FMAC4 soap_get__tempuri__Check_USCORELogin(struct soap *soap, _tempuri__Check_USCORELogin *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Check_USCORELogin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Check_USCORELogin * SOAP_FMAC2 soap_instantiate__tempuri__Check_USCORELogin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Check_USCORELogin(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Check_USCORELogin, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__Check_USCORELogin);
		if (size)
			*size = sizeof(_tempuri__Check_USCORELogin);
		((_tempuri__Check_USCORELogin*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__Check_USCORELogin, n);
		if (size)
			*size = n * sizeof(_tempuri__Check_USCORELogin);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Check_USCORELogin*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Check_USCORELogin*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Check_USCORELogin(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Check_USCORELogin %p -> %p\n", q, p));
	*(_tempuri__Check_USCORELogin*)p = *(_tempuri__Check_USCORELogin*)q;
}

void _tempuri__saveSingleReworkResultResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__saveSingleReworkResultResponse::saveSingleReworkResultResult = NULL;
	/* transient soap skipped */
}

void _tempuri__saveSingleReworkResultResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__saveSingleReworkResultResponse::saveSingleReworkResultResult);
	/* transient soap skipped */
#endif
}

int _tempuri__saveSingleReworkResultResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__saveSingleReworkResultResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__saveSingleReworkResultResponse(struct soap *soap, const char *tag, int id, const _tempuri__saveSingleReworkResultResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__saveSingleReworkResultResponse), type))
		return soap->error;
	if (a->saveSingleReworkResultResult)
		soap_element_result(soap, "tempuri:saveSingleReworkResultResult");
	if (soap_out_PointerTostd__string(soap, "tempuri:saveSingleReworkResultResult", -1, &(a->_tempuri__saveSingleReworkResultResponse::saveSingleReworkResultResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__saveSingleReworkResultResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__saveSingleReworkResultResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__saveSingleReworkResultResponse * SOAP_FMAC4 soap_in__tempuri__saveSingleReworkResultResponse(struct soap *soap, const char *tag, _tempuri__saveSingleReworkResultResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__saveSingleReworkResultResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__saveSingleReworkResultResponse, sizeof(_tempuri__saveSingleReworkResultResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__saveSingleReworkResultResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__saveSingleReworkResultResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_saveSingleReworkResultResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saveSingleReworkResultResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:saveSingleReworkResultResult", &(a->_tempuri__saveSingleReworkResultResponse::saveSingleReworkResultResult), "xsd:string"))
				{	soap_flag_saveSingleReworkResultResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:saveSingleReworkResultResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__saveSingleReworkResultResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__saveSingleReworkResultResponse, 0, sizeof(_tempuri__saveSingleReworkResultResponse), 0, soap_copy__tempuri__saveSingleReworkResultResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__saveSingleReworkResultResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__saveSingleReworkResultResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:saveSingleReworkResultResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__saveSingleReworkResultResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__saveSingleReworkResultResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__saveSingleReworkResultResponse * SOAP_FMAC4 soap_get__tempuri__saveSingleReworkResultResponse(struct soap *soap, _tempuri__saveSingleReworkResultResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__saveSingleReworkResultResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__saveSingleReworkResultResponse * SOAP_FMAC2 soap_instantiate__tempuri__saveSingleReworkResultResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__saveSingleReworkResultResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__saveSingleReworkResultResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__saveSingleReworkResultResponse);
		if (size)
			*size = sizeof(_tempuri__saveSingleReworkResultResponse);
		((_tempuri__saveSingleReworkResultResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__saveSingleReworkResultResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__saveSingleReworkResultResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__saveSingleReworkResultResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__saveSingleReworkResultResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__saveSingleReworkResultResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__saveSingleReworkResultResponse %p -> %p\n", q, p));
	*(_tempuri__saveSingleReworkResultResponse*)p = *(_tempuri__saveSingleReworkResultResponse*)q;
}

void _tempuri__saveSingleReworkResult::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__saveSingleReworkResult::strEMP_USCORENO = NULL;
	this->_tempuri__saveSingleReworkResult::intSTART_USCOREGROUP_USCORECODE = NULL;
	this->_tempuri__saveSingleReworkResult::strECN_USCOREMEMO = NULL;
	this->_tempuri__saveSingleReworkResult::strSERIAL_USCORENUMBER = NULL;
	this->_tempuri__saveSingleReworkResult::strVERSION_USCORECODE = NULL;
	/* transient soap skipped */
}

void _tempuri__saveSingleReworkResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__saveSingleReworkResult::strEMP_USCORENO);
	soap_serialize_PointerToint(soap, &this->_tempuri__saveSingleReworkResult::intSTART_USCOREGROUP_USCORECODE);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__saveSingleReworkResult::strECN_USCOREMEMO);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__saveSingleReworkResult::strSERIAL_USCORENUMBER);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__saveSingleReworkResult::strVERSION_USCORECODE);
	/* transient soap skipped */
#endif
}

int _tempuri__saveSingleReworkResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__saveSingleReworkResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__saveSingleReworkResult(struct soap *soap, const char *tag, int id, const _tempuri__saveSingleReworkResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__saveSingleReworkResult), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:strEMP_NO", -1, &(a->_tempuri__saveSingleReworkResult::strEMP_USCORENO), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "tempuri:intSTART_GROUP_CODE", -1, &(a->_tempuri__saveSingleReworkResult::intSTART_USCOREGROUP_USCORECODE), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:strECN_MEMO", -1, &(a->_tempuri__saveSingleReworkResult::strECN_USCOREMEMO), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:strSERIAL_NUMBER", -1, &(a->_tempuri__saveSingleReworkResult::strSERIAL_USCORENUMBER), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:strVERSION_CODE", -1, &(a->_tempuri__saveSingleReworkResult::strVERSION_USCORECODE), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__saveSingleReworkResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__saveSingleReworkResult(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__saveSingleReworkResult * SOAP_FMAC4 soap_in__tempuri__saveSingleReworkResult(struct soap *soap, const char *tag, _tempuri__saveSingleReworkResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__saveSingleReworkResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__saveSingleReworkResult, sizeof(_tempuri__saveSingleReworkResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__saveSingleReworkResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__saveSingleReworkResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strEMP_USCORENO1 = 1;
	size_t soap_flag_intSTART_USCOREGROUP_USCORECODE1 = 1;
	size_t soap_flag_strECN_USCOREMEMO1 = 1;
	size_t soap_flag_strSERIAL_USCORENUMBER1 = 1;
	size_t soap_flag_strVERSION_USCORECODE1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strEMP_USCORENO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:strEMP_NO", &(a->_tempuri__saveSingleReworkResult::strEMP_USCORENO), "xsd:string"))
				{	soap_flag_strEMP_USCORENO1--;
					continue;
				}
			if (soap_flag_intSTART_USCOREGROUP_USCORECODE1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tempuri:intSTART_GROUP_CODE", &(a->_tempuri__saveSingleReworkResult::intSTART_USCOREGROUP_USCORECODE), "xsd:int"))
				{	soap_flag_intSTART_USCOREGROUP_USCORECODE1--;
					continue;
				}
			if (soap_flag_strECN_USCOREMEMO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:strECN_MEMO", &(a->_tempuri__saveSingleReworkResult::strECN_USCOREMEMO), "xsd:string"))
				{	soap_flag_strECN_USCOREMEMO1--;
					continue;
				}
			if (soap_flag_strSERIAL_USCORENUMBER1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:strSERIAL_NUMBER", &(a->_tempuri__saveSingleReworkResult::strSERIAL_USCORENUMBER), "xsd:string"))
				{	soap_flag_strSERIAL_USCORENUMBER1--;
					continue;
				}
			if (soap_flag_strVERSION_USCORECODE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:strVERSION_CODE", &(a->_tempuri__saveSingleReworkResult::strVERSION_USCORECODE), "xsd:string"))
				{	soap_flag_strVERSION_USCORECODE1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__saveSingleReworkResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__saveSingleReworkResult, 0, sizeof(_tempuri__saveSingleReworkResult), 0, soap_copy__tempuri__saveSingleReworkResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__saveSingleReworkResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__saveSingleReworkResult);
	if (this->soap_out(soap, tag?tag:"tempuri:saveSingleReworkResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__saveSingleReworkResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__saveSingleReworkResult(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__saveSingleReworkResult * SOAP_FMAC4 soap_get__tempuri__saveSingleReworkResult(struct soap *soap, _tempuri__saveSingleReworkResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__saveSingleReworkResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__saveSingleReworkResult * SOAP_FMAC2 soap_instantiate__tempuri__saveSingleReworkResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__saveSingleReworkResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__saveSingleReworkResult, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__saveSingleReworkResult);
		if (size)
			*size = sizeof(_tempuri__saveSingleReworkResult);
		((_tempuri__saveSingleReworkResult*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__saveSingleReworkResult, n);
		if (size)
			*size = n * sizeof(_tempuri__saveSingleReworkResult);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__saveSingleReworkResult*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__saveSingleReworkResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__saveSingleReworkResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__saveSingleReworkResult %p -> %p\n", q, p));
	*(_tempuri__saveSingleReworkResult*)p = *(_tempuri__saveSingleReworkResult*)q;
}

void _tempuri__BatchBackResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__BatchBackResponse::BatchBackResult = NULL;
	/* transient soap skipped */
}

void _tempuri__BatchBackResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__BatchBackResponse::BatchBackResult);
	/* transient soap skipped */
#endif
}

int _tempuri__BatchBackResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__BatchBackResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__BatchBackResponse(struct soap *soap, const char *tag, int id, const _tempuri__BatchBackResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__BatchBackResponse), type))
		return soap->error;
	if (a->BatchBackResult)
		soap_element_result(soap, "tempuri:BatchBackResult");
	if (soap_out_PointerTostd__string(soap, "tempuri:BatchBackResult", -1, &(a->_tempuri__BatchBackResponse::BatchBackResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__BatchBackResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__BatchBackResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__BatchBackResponse * SOAP_FMAC4 soap_in__tempuri__BatchBackResponse(struct soap *soap, const char *tag, _tempuri__BatchBackResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__BatchBackResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__BatchBackResponse, sizeof(_tempuri__BatchBackResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__BatchBackResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__BatchBackResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_BatchBackResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_BatchBackResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:BatchBackResult", &(a->_tempuri__BatchBackResponse::BatchBackResult), "xsd:string"))
				{	soap_flag_BatchBackResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:BatchBackResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__BatchBackResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__BatchBackResponse, 0, sizeof(_tempuri__BatchBackResponse), 0, soap_copy__tempuri__BatchBackResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__BatchBackResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__BatchBackResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:BatchBackResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__BatchBackResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__BatchBackResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__BatchBackResponse * SOAP_FMAC4 soap_get__tempuri__BatchBackResponse(struct soap *soap, _tempuri__BatchBackResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__BatchBackResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__BatchBackResponse * SOAP_FMAC2 soap_instantiate__tempuri__BatchBackResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__BatchBackResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__BatchBackResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__BatchBackResponse);
		if (size)
			*size = sizeof(_tempuri__BatchBackResponse);
		((_tempuri__BatchBackResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__BatchBackResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__BatchBackResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__BatchBackResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__BatchBackResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__BatchBackResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__BatchBackResponse %p -> %p\n", q, p));
	*(_tempuri__BatchBackResponse*)p = *(_tempuri__BatchBackResponse*)q;
}

void _tempuri__BatchBack::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__BatchBack::strQA_USCORENO = NULL;
	/* transient soap skipped */
}

void _tempuri__BatchBack::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__BatchBack::strQA_USCORENO);
	/* transient soap skipped */
#endif
}

int _tempuri__BatchBack::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__BatchBack(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__BatchBack(struct soap *soap, const char *tag, int id, const _tempuri__BatchBack *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__BatchBack), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:strQA_NO", -1, &(a->_tempuri__BatchBack::strQA_USCORENO), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__BatchBack::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__BatchBack(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__BatchBack * SOAP_FMAC4 soap_in__tempuri__BatchBack(struct soap *soap, const char *tag, _tempuri__BatchBack *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__BatchBack *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__BatchBack, sizeof(_tempuri__BatchBack), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__BatchBack)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__BatchBack *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strQA_USCORENO1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strQA_USCORENO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:strQA_NO", &(a->_tempuri__BatchBack::strQA_USCORENO), "xsd:string"))
				{	soap_flag_strQA_USCORENO1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__BatchBack *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__BatchBack, 0, sizeof(_tempuri__BatchBack), 0, soap_copy__tempuri__BatchBack);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__BatchBack::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__BatchBack);
	if (this->soap_out(soap, tag?tag:"tempuri:BatchBack", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__BatchBack::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__BatchBack(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__BatchBack * SOAP_FMAC4 soap_get__tempuri__BatchBack(struct soap *soap, _tempuri__BatchBack *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__BatchBack(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__BatchBack * SOAP_FMAC2 soap_instantiate__tempuri__BatchBack(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__BatchBack(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__BatchBack, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__BatchBack);
		if (size)
			*size = sizeof(_tempuri__BatchBack);
		((_tempuri__BatchBack*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__BatchBack, n);
		if (size)
			*size = n * sizeof(_tempuri__BatchBack);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__BatchBack*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__BatchBack*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__BatchBack(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__BatchBack %p -> %p\n", q, p));
	*(_tempuri__BatchBack*)p = *(_tempuri__BatchBack*)q;
}

void _tempuri__UpdateSMTSteelNet2Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__UpdateSMTSteelNet2Response::UpdateSMTSteelNet2Result = NULL;
	/* transient soap skipped */
}

void _tempuri__UpdateSMTSteelNet2Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__UpdateSMTSteelNet2Response::UpdateSMTSteelNet2Result);
	/* transient soap skipped */
#endif
}

int _tempuri__UpdateSMTSteelNet2Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__UpdateSMTSteelNet2Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__UpdateSMTSteelNet2Response(struct soap *soap, const char *tag, int id, const _tempuri__UpdateSMTSteelNet2Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response), type))
		return soap->error;
	if (a->UpdateSMTSteelNet2Result)
		soap_element_result(soap, "tempuri:UpdateSMTSteelNet2Result");
	if (soap_out_PointerTostd__string(soap, "tempuri:UpdateSMTSteelNet2Result", -1, &(a->_tempuri__UpdateSMTSteelNet2Response::UpdateSMTSteelNet2Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__UpdateSMTSteelNet2Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__UpdateSMTSteelNet2Response(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2Response * SOAP_FMAC4 soap_in__tempuri__UpdateSMTSteelNet2Response(struct soap *soap, const char *tag, _tempuri__UpdateSMTSteelNet2Response *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__UpdateSMTSteelNet2Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response, sizeof(_tempuri__UpdateSMTSteelNet2Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__UpdateSMTSteelNet2Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_UpdateSMTSteelNet2Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_UpdateSMTSteelNet2Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:UpdateSMTSteelNet2Result", &(a->_tempuri__UpdateSMTSteelNet2Response::UpdateSMTSteelNet2Result), "xsd:string"))
				{	soap_flag_UpdateSMTSteelNet2Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:UpdateSMTSteelNet2Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__UpdateSMTSteelNet2Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response, 0, sizeof(_tempuri__UpdateSMTSteelNet2Response), 0, soap_copy__tempuri__UpdateSMTSteelNet2Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__UpdateSMTSteelNet2Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response);
	if (this->soap_out(soap, tag?tag:"tempuri:UpdateSMTSteelNet2Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__UpdateSMTSteelNet2Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__UpdateSMTSteelNet2Response(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2Response * SOAP_FMAC4 soap_get__tempuri__UpdateSMTSteelNet2Response(struct soap *soap, _tempuri__UpdateSMTSteelNet2Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__UpdateSMTSteelNet2Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__UpdateSMTSteelNet2Response * SOAP_FMAC2 soap_instantiate__tempuri__UpdateSMTSteelNet2Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__UpdateSMTSteelNet2Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__UpdateSMTSteelNet2Response);
		if (size)
			*size = sizeof(_tempuri__UpdateSMTSteelNet2Response);
		((_tempuri__UpdateSMTSteelNet2Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__UpdateSMTSteelNet2Response, n);
		if (size)
			*size = n * sizeof(_tempuri__UpdateSMTSteelNet2Response);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__UpdateSMTSteelNet2Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__UpdateSMTSteelNet2Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__UpdateSMTSteelNet2Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__UpdateSMTSteelNet2Response %p -> %p\n", q, p));
	*(_tempuri__UpdateSMTSteelNet2Response*)p = *(_tempuri__UpdateSMTSteelNet2Response*)q;
}

void _tempuri__UpdateSMTSteelNet2::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__UpdateSMTSteelNet2::strMO = NULL;
	this->_tempuri__UpdateSMTSteelNet2::intLINECODE = NULL;
	/* transient soap skipped */
}

void _tempuri__UpdateSMTSteelNet2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__UpdateSMTSteelNet2::strMO);
	soap_serialize_PointerToint(soap, &this->_tempuri__UpdateSMTSteelNet2::intLINECODE);
	/* transient soap skipped */
#endif
}

int _tempuri__UpdateSMTSteelNet2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__UpdateSMTSteelNet2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__UpdateSMTSteelNet2(struct soap *soap, const char *tag, int id, const _tempuri__UpdateSMTSteelNet2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__UpdateSMTSteelNet2), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:strMO", -1, &(a->_tempuri__UpdateSMTSteelNet2::strMO), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "tempuri:intLINECODE", -1, &(a->_tempuri__UpdateSMTSteelNet2::intLINECODE), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__UpdateSMTSteelNet2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__UpdateSMTSteelNet2(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2 * SOAP_FMAC4 soap_in__tempuri__UpdateSMTSteelNet2(struct soap *soap, const char *tag, _tempuri__UpdateSMTSteelNet2 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__UpdateSMTSteelNet2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__UpdateSMTSteelNet2, sizeof(_tempuri__UpdateSMTSteelNet2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__UpdateSMTSteelNet2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__UpdateSMTSteelNet2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strMO1 = 1;
	size_t soap_flag_intLINECODE1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strMO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:strMO", &(a->_tempuri__UpdateSMTSteelNet2::strMO), "xsd:string"))
				{	soap_flag_strMO1--;
					continue;
				}
			if (soap_flag_intLINECODE1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tempuri:intLINECODE", &(a->_tempuri__UpdateSMTSteelNet2::intLINECODE), "xsd:int"))
				{	soap_flag_intLINECODE1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__UpdateSMTSteelNet2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__UpdateSMTSteelNet2, 0, sizeof(_tempuri__UpdateSMTSteelNet2), 0, soap_copy__tempuri__UpdateSMTSteelNet2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__UpdateSMTSteelNet2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__UpdateSMTSteelNet2);
	if (this->soap_out(soap, tag?tag:"tempuri:UpdateSMTSteelNet2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__UpdateSMTSteelNet2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__UpdateSMTSteelNet2(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2 * SOAP_FMAC4 soap_get__tempuri__UpdateSMTSteelNet2(struct soap *soap, _tempuri__UpdateSMTSteelNet2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__UpdateSMTSteelNet2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__UpdateSMTSteelNet2 * SOAP_FMAC2 soap_instantiate__tempuri__UpdateSMTSteelNet2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__UpdateSMTSteelNet2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__UpdateSMTSteelNet2, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__UpdateSMTSteelNet2);
		if (size)
			*size = sizeof(_tempuri__UpdateSMTSteelNet2);
		((_tempuri__UpdateSMTSteelNet2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__UpdateSMTSteelNet2, n);
		if (size)
			*size = n * sizeof(_tempuri__UpdateSMTSteelNet2);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__UpdateSMTSteelNet2*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__UpdateSMTSteelNet2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__UpdateSMTSteelNet2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__UpdateSMTSteelNet2 %p -> %p\n", q, p));
	*(_tempuri__UpdateSMTSteelNet2*)p = *(_tempuri__UpdateSMTSteelNet2*)q;
}

void _tempuri__UpdateSMTSteelNetResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__UpdateSMTSteelNetResponse::UpdateSMTSteelNetResult = NULL;
	/* transient soap skipped */
}

void _tempuri__UpdateSMTSteelNetResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__UpdateSMTSteelNetResponse::UpdateSMTSteelNetResult);
	/* transient soap skipped */
#endif
}

int _tempuri__UpdateSMTSteelNetResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__UpdateSMTSteelNetResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__UpdateSMTSteelNetResponse(struct soap *soap, const char *tag, int id, const _tempuri__UpdateSMTSteelNetResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse), type))
		return soap->error;
	if (a->UpdateSMTSteelNetResult)
		soap_element_result(soap, "tempuri:UpdateSMTSteelNetResult");
	if (soap_out_PointerTostd__string(soap, "tempuri:UpdateSMTSteelNetResult", -1, &(a->_tempuri__UpdateSMTSteelNetResponse::UpdateSMTSteelNetResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__UpdateSMTSteelNetResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__UpdateSMTSteelNetResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNetResponse * SOAP_FMAC4 soap_in__tempuri__UpdateSMTSteelNetResponse(struct soap *soap, const char *tag, _tempuri__UpdateSMTSteelNetResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__UpdateSMTSteelNetResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse, sizeof(_tempuri__UpdateSMTSteelNetResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__UpdateSMTSteelNetResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_UpdateSMTSteelNetResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_UpdateSMTSteelNetResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:UpdateSMTSteelNetResult", &(a->_tempuri__UpdateSMTSteelNetResponse::UpdateSMTSteelNetResult), "xsd:string"))
				{	soap_flag_UpdateSMTSteelNetResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:UpdateSMTSteelNetResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__UpdateSMTSteelNetResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse, 0, sizeof(_tempuri__UpdateSMTSteelNetResponse), 0, soap_copy__tempuri__UpdateSMTSteelNetResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__UpdateSMTSteelNetResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:UpdateSMTSteelNetResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__UpdateSMTSteelNetResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__UpdateSMTSteelNetResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNetResponse * SOAP_FMAC4 soap_get__tempuri__UpdateSMTSteelNetResponse(struct soap *soap, _tempuri__UpdateSMTSteelNetResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__UpdateSMTSteelNetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__UpdateSMTSteelNetResponse * SOAP_FMAC2 soap_instantiate__tempuri__UpdateSMTSteelNetResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__UpdateSMTSteelNetResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__UpdateSMTSteelNetResponse);
		if (size)
			*size = sizeof(_tempuri__UpdateSMTSteelNetResponse);
		((_tempuri__UpdateSMTSteelNetResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__UpdateSMTSteelNetResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__UpdateSMTSteelNetResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__UpdateSMTSteelNetResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__UpdateSMTSteelNetResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__UpdateSMTSteelNetResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__UpdateSMTSteelNetResponse %p -> %p\n", q, p));
	*(_tempuri__UpdateSMTSteelNetResponse*)p = *(_tempuri__UpdateSMTSteelNetResponse*)q;
}

void _tempuri__UpdateSMTSteelNet::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__UpdateSMTSteelNet::strMO = NULL;
	this->_tempuri__UpdateSMTSteelNet::intLINECODE = NULL;
	/* transient soap skipped */
}

void _tempuri__UpdateSMTSteelNet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__UpdateSMTSteelNet::strMO);
	soap_serialize_PointerToint(soap, &this->_tempuri__UpdateSMTSteelNet::intLINECODE);
	/* transient soap skipped */
#endif
}

int _tempuri__UpdateSMTSteelNet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__UpdateSMTSteelNet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__UpdateSMTSteelNet(struct soap *soap, const char *tag, int id, const _tempuri__UpdateSMTSteelNet *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__UpdateSMTSteelNet), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:strMO", -1, &(a->_tempuri__UpdateSMTSteelNet::strMO), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "tempuri:intLINECODE", -1, &(a->_tempuri__UpdateSMTSteelNet::intLINECODE), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__UpdateSMTSteelNet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__UpdateSMTSteelNet(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet * SOAP_FMAC4 soap_in__tempuri__UpdateSMTSteelNet(struct soap *soap, const char *tag, _tempuri__UpdateSMTSteelNet *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__UpdateSMTSteelNet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__UpdateSMTSteelNet, sizeof(_tempuri__UpdateSMTSteelNet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__UpdateSMTSteelNet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__UpdateSMTSteelNet *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_strMO1 = 1;
	size_t soap_flag_intLINECODE1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strMO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:strMO", &(a->_tempuri__UpdateSMTSteelNet::strMO), "xsd:string"))
				{	soap_flag_strMO1--;
					continue;
				}
			if (soap_flag_intLINECODE1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tempuri:intLINECODE", &(a->_tempuri__UpdateSMTSteelNet::intLINECODE), "xsd:int"))
				{	soap_flag_intLINECODE1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__UpdateSMTSteelNet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__UpdateSMTSteelNet, 0, sizeof(_tempuri__UpdateSMTSteelNet), 0, soap_copy__tempuri__UpdateSMTSteelNet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__UpdateSMTSteelNet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__UpdateSMTSteelNet);
	if (this->soap_out(soap, tag?tag:"tempuri:UpdateSMTSteelNet", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__UpdateSMTSteelNet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__UpdateSMTSteelNet(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet * SOAP_FMAC4 soap_get__tempuri__UpdateSMTSteelNet(struct soap *soap, _tempuri__UpdateSMTSteelNet *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__UpdateSMTSteelNet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__UpdateSMTSteelNet * SOAP_FMAC2 soap_instantiate__tempuri__UpdateSMTSteelNet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__UpdateSMTSteelNet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__UpdateSMTSteelNet, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__UpdateSMTSteelNet);
		if (size)
			*size = sizeof(_tempuri__UpdateSMTSteelNet);
		((_tempuri__UpdateSMTSteelNet*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__UpdateSMTSteelNet, n);
		if (size)
			*size = n * sizeof(_tempuri__UpdateSMTSteelNet);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__UpdateSMTSteelNet*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__UpdateSMTSteelNet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__UpdateSMTSteelNet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__UpdateSMTSteelNet %p -> %p\n", q, p));
	*(_tempuri__UpdateSMTSteelNet*)p = *(_tempuri__UpdateSMTSteelNet*)q;
}

void _tempuri__COMMAND_USCORECODEResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__COMMAND_USCORECODEResponse::COMMAND_USCORECODEResult = NULL;
	/* transient soap skipped */
}

void _tempuri__COMMAND_USCORECODEResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__COMMAND_USCORECODEResponse::COMMAND_USCORECODEResult);
	/* transient soap skipped */
#endif
}

int _tempuri__COMMAND_USCORECODEResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__COMMAND_USCORECODEResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__COMMAND_USCORECODEResponse(struct soap *soap, const char *tag, int id, const _tempuri__COMMAND_USCORECODEResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse), type))
		return soap->error;
	if (a->COMMAND_USCORECODEResult)
		soap_element_result(soap, "tempuri:COMMAND_CODEResult");
	if (soap_out_PointerTostd__string(soap, "tempuri:COMMAND_CODEResult", -1, &(a->_tempuri__COMMAND_USCORECODEResponse::COMMAND_USCORECODEResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__COMMAND_USCORECODEResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__COMMAND_USCORECODEResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__COMMAND_USCORECODEResponse * SOAP_FMAC4 soap_in__tempuri__COMMAND_USCORECODEResponse(struct soap *soap, const char *tag, _tempuri__COMMAND_USCORECODEResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__COMMAND_USCORECODEResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse, sizeof(_tempuri__COMMAND_USCORECODEResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__COMMAND_USCORECODEResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_COMMAND_USCORECODEResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_COMMAND_USCORECODEResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:COMMAND_CODEResult", &(a->_tempuri__COMMAND_USCORECODEResponse::COMMAND_USCORECODEResult), "xsd:string"))
				{	soap_flag_COMMAND_USCORECODEResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:COMMAND_CODEResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__COMMAND_USCORECODEResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse, 0, sizeof(_tempuri__COMMAND_USCORECODEResponse), 0, soap_copy__tempuri__COMMAND_USCORECODEResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__COMMAND_USCORECODEResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:COMMAND_CODEResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__COMMAND_USCORECODEResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__COMMAND_USCORECODEResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__COMMAND_USCORECODEResponse * SOAP_FMAC4 soap_get__tempuri__COMMAND_USCORECODEResponse(struct soap *soap, _tempuri__COMMAND_USCORECODEResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__COMMAND_USCORECODEResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__COMMAND_USCORECODEResponse * SOAP_FMAC2 soap_instantiate__tempuri__COMMAND_USCORECODEResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__COMMAND_USCORECODEResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__COMMAND_USCORECODEResponse);
		if (size)
			*size = sizeof(_tempuri__COMMAND_USCORECODEResponse);
		((_tempuri__COMMAND_USCORECODEResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__COMMAND_USCORECODEResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__COMMAND_USCORECODEResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__COMMAND_USCORECODEResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__COMMAND_USCORECODEResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__COMMAND_USCORECODEResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__COMMAND_USCORECODEResponse %p -> %p\n", q, p));
	*(_tempuri__COMMAND_USCORECODEResponse*)p = *(_tempuri__COMMAND_USCORECODEResponse*)q;
}

void _tempuri__COMMAND_USCORECODE::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__COMMAND_USCORECODE::CMD1 = NULL;
	this->_tempuri__COMMAND_USCORECODE::CMD2 = NULL;
	this->_tempuri__COMMAND_USCORECODE::CMD3 = NULL;
	this->_tempuri__COMMAND_USCORECODE::CMD4 = NULL;
	this->_tempuri__COMMAND_USCORECODE::CMD5 = NULL;
	this->_tempuri__COMMAND_USCORECODE::CMD6 = NULL;
	this->_tempuri__COMMAND_USCORECODE::CMD7 = NULL;
	this->_tempuri__COMMAND_USCORECODE::TSTATION = NULL;
	/* transient soap skipped */
}

void _tempuri__COMMAND_USCORECODE::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__COMMAND_USCORECODE::CMD1);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__COMMAND_USCORECODE::CMD2);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__COMMAND_USCORECODE::CMD3);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__COMMAND_USCORECODE::CMD4);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__COMMAND_USCORECODE::CMD5);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__COMMAND_USCORECODE::CMD6);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__COMMAND_USCORECODE::CMD7);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__COMMAND_USCORECODE::TSTATION);
	/* transient soap skipped */
#endif
}

int _tempuri__COMMAND_USCORECODE::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__COMMAND_USCORECODE(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__COMMAND_USCORECODE(struct soap *soap, const char *tag, int id, const _tempuri__COMMAND_USCORECODE *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__COMMAND_USCORECODE), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:CMD1", -1, &(a->_tempuri__COMMAND_USCORECODE::CMD1), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:CMD2", -1, &(a->_tempuri__COMMAND_USCORECODE::CMD2), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:CMD3", -1, &(a->_tempuri__COMMAND_USCORECODE::CMD3), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:CMD4", -1, &(a->_tempuri__COMMAND_USCORECODE::CMD4), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:CMD5", -1, &(a->_tempuri__COMMAND_USCORECODE::CMD5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:CMD6", -1, &(a->_tempuri__COMMAND_USCORECODE::CMD6), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:CMD7", -1, &(a->_tempuri__COMMAND_USCORECODE::CMD7), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:TSTATION", -1, &(a->_tempuri__COMMAND_USCORECODE::TSTATION), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__COMMAND_USCORECODE::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__COMMAND_USCORECODE(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__COMMAND_USCORECODE * SOAP_FMAC4 soap_in__tempuri__COMMAND_USCORECODE(struct soap *soap, const char *tag, _tempuri__COMMAND_USCORECODE *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__COMMAND_USCORECODE *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__COMMAND_USCORECODE, sizeof(_tempuri__COMMAND_USCORECODE), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__COMMAND_USCORECODE)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__COMMAND_USCORECODE *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CMD11 = 1;
	size_t soap_flag_CMD21 = 1;
	size_t soap_flag_CMD31 = 1;
	size_t soap_flag_CMD41 = 1;
	size_t soap_flag_CMD51 = 1;
	size_t soap_flag_CMD61 = 1;
	size_t soap_flag_CMD71 = 1;
	size_t soap_flag_TSTATION1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CMD11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:CMD1", &(a->_tempuri__COMMAND_USCORECODE::CMD1), "xsd:string"))
				{	soap_flag_CMD11--;
					continue;
				}
			if (soap_flag_CMD21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:CMD2", &(a->_tempuri__COMMAND_USCORECODE::CMD2), "xsd:string"))
				{	soap_flag_CMD21--;
					continue;
				}
			if (soap_flag_CMD31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:CMD3", &(a->_tempuri__COMMAND_USCORECODE::CMD3), "xsd:string"))
				{	soap_flag_CMD31--;
					continue;
				}
			if (soap_flag_CMD41 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:CMD4", &(a->_tempuri__COMMAND_USCORECODE::CMD4), "xsd:string"))
				{	soap_flag_CMD41--;
					continue;
				}
			if (soap_flag_CMD51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:CMD5", &(a->_tempuri__COMMAND_USCORECODE::CMD5), "xsd:string"))
				{	soap_flag_CMD51--;
					continue;
				}
			if (soap_flag_CMD61 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:CMD6", &(a->_tempuri__COMMAND_USCORECODE::CMD6), "xsd:string"))
				{	soap_flag_CMD61--;
					continue;
				}
			if (soap_flag_CMD71 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:CMD7", &(a->_tempuri__COMMAND_USCORECODE::CMD7), "xsd:string"))
				{	soap_flag_CMD71--;
					continue;
				}
			if (soap_flag_TSTATION1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:TSTATION", &(a->_tempuri__COMMAND_USCORECODE::TSTATION), "xsd:string"))
				{	soap_flag_TSTATION1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__COMMAND_USCORECODE *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__COMMAND_USCORECODE, 0, sizeof(_tempuri__COMMAND_USCORECODE), 0, soap_copy__tempuri__COMMAND_USCORECODE);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__COMMAND_USCORECODE::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__COMMAND_USCORECODE);
	if (this->soap_out(soap, tag?tag:"tempuri:COMMAND_CODE", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__COMMAND_USCORECODE::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__COMMAND_USCORECODE(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__COMMAND_USCORECODE * SOAP_FMAC4 soap_get__tempuri__COMMAND_USCORECODE(struct soap *soap, _tempuri__COMMAND_USCORECODE *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__COMMAND_USCORECODE(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__COMMAND_USCORECODE * SOAP_FMAC2 soap_instantiate__tempuri__COMMAND_USCORECODE(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__COMMAND_USCORECODE(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__COMMAND_USCORECODE, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__COMMAND_USCORECODE);
		if (size)
			*size = sizeof(_tempuri__COMMAND_USCORECODE);
		((_tempuri__COMMAND_USCORECODE*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__COMMAND_USCORECODE, n);
		if (size)
			*size = n * sizeof(_tempuri__COMMAND_USCORECODE);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__COMMAND_USCORECODE*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__COMMAND_USCORECODE*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__COMMAND_USCORECODE(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__COMMAND_USCORECODE %p -> %p\n", q, p));
	*(_tempuri__COMMAND_USCORECODE*)p = *(_tempuri__COMMAND_USCORECODE*)q;
}

void _tempuri__CheckRuleSNResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__CheckRuleSNResponse::CheckRuleSNResult = NULL;
	/* transient soap skipped */
}

void _tempuri__CheckRuleSNResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__CheckRuleSNResponse::CheckRuleSNResult);
	/* transient soap skipped */
#endif
}

int _tempuri__CheckRuleSNResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__CheckRuleSNResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__CheckRuleSNResponse(struct soap *soap, const char *tag, int id, const _tempuri__CheckRuleSNResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__CheckRuleSNResponse), type))
		return soap->error;
	if (a->CheckRuleSNResult)
		soap_element_result(soap, "tempuri:CheckRuleSNResult");
	if (soap_out_PointerTostd__string(soap, "tempuri:CheckRuleSNResult", -1, &(a->_tempuri__CheckRuleSNResponse::CheckRuleSNResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__CheckRuleSNResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__CheckRuleSNResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__CheckRuleSNResponse * SOAP_FMAC4 soap_in__tempuri__CheckRuleSNResponse(struct soap *soap, const char *tag, _tempuri__CheckRuleSNResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__CheckRuleSNResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__CheckRuleSNResponse, sizeof(_tempuri__CheckRuleSNResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__CheckRuleSNResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__CheckRuleSNResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CheckRuleSNResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CheckRuleSNResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:CheckRuleSNResult", &(a->_tempuri__CheckRuleSNResponse::CheckRuleSNResult), "xsd:string"))
				{	soap_flag_CheckRuleSNResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:CheckRuleSNResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__CheckRuleSNResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__CheckRuleSNResponse, 0, sizeof(_tempuri__CheckRuleSNResponse), 0, soap_copy__tempuri__CheckRuleSNResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__CheckRuleSNResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__CheckRuleSNResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:CheckRuleSNResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__CheckRuleSNResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__CheckRuleSNResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__CheckRuleSNResponse * SOAP_FMAC4 soap_get__tempuri__CheckRuleSNResponse(struct soap *soap, _tempuri__CheckRuleSNResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__CheckRuleSNResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__CheckRuleSNResponse * SOAP_FMAC2 soap_instantiate__tempuri__CheckRuleSNResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__CheckRuleSNResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__CheckRuleSNResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__CheckRuleSNResponse);
		if (size)
			*size = sizeof(_tempuri__CheckRuleSNResponse);
		((_tempuri__CheckRuleSNResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__CheckRuleSNResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__CheckRuleSNResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__CheckRuleSNResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__CheckRuleSNResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__CheckRuleSNResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__CheckRuleSNResponse %p -> %p\n", q, p));
	*(_tempuri__CheckRuleSNResponse*)p = *(_tempuri__CheckRuleSNResponse*)q;
}

void _tempuri__CheckRuleSN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__CheckRuleSN::TPART_USCORENO = NULL;
	this->_tempuri__CheckRuleSN::TSN = NULL;
	this->_tempuri__CheckRuleSN::TTYPE = NULL;
	/* transient soap skipped */
}

void _tempuri__CheckRuleSN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__CheckRuleSN::TPART_USCORENO);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__CheckRuleSN::TSN);
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__CheckRuleSN::TTYPE);
	/* transient soap skipped */
#endif
}

int _tempuri__CheckRuleSN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__CheckRuleSN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__CheckRuleSN(struct soap *soap, const char *tag, int id, const _tempuri__CheckRuleSN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__CheckRuleSN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:TPART_NO", -1, &(a->_tempuri__CheckRuleSN::TPART_USCORENO), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:TSN", -1, &(a->_tempuri__CheckRuleSN::TSN), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:TTYPE", -1, &(a->_tempuri__CheckRuleSN::TTYPE), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__CheckRuleSN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__CheckRuleSN(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__CheckRuleSN * SOAP_FMAC4 soap_in__tempuri__CheckRuleSN(struct soap *soap, const char *tag, _tempuri__CheckRuleSN *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__CheckRuleSN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__CheckRuleSN, sizeof(_tempuri__CheckRuleSN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__CheckRuleSN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__CheckRuleSN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_TPART_USCORENO1 = 1;
	size_t soap_flag_TSN1 = 1;
	size_t soap_flag_TTYPE1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TPART_USCORENO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:TPART_NO", &(a->_tempuri__CheckRuleSN::TPART_USCORENO), "xsd:string"))
				{	soap_flag_TPART_USCORENO1--;
					continue;
				}
			if (soap_flag_TSN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:TSN", &(a->_tempuri__CheckRuleSN::TSN), "xsd:string"))
				{	soap_flag_TSN1--;
					continue;
				}
			if (soap_flag_TTYPE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:TTYPE", &(a->_tempuri__CheckRuleSN::TTYPE), "xsd:string"))
				{	soap_flag_TTYPE1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__CheckRuleSN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__CheckRuleSN, 0, sizeof(_tempuri__CheckRuleSN), 0, soap_copy__tempuri__CheckRuleSN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__CheckRuleSN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__CheckRuleSN);
	if (this->soap_out(soap, tag?tag:"tempuri:CheckRuleSN", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__CheckRuleSN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__CheckRuleSN(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__CheckRuleSN * SOAP_FMAC4 soap_get__tempuri__CheckRuleSN(struct soap *soap, _tempuri__CheckRuleSN *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__CheckRuleSN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__CheckRuleSN * SOAP_FMAC2 soap_instantiate__tempuri__CheckRuleSN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__CheckRuleSN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__CheckRuleSN, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__CheckRuleSN);
		if (size)
			*size = sizeof(_tempuri__CheckRuleSN);
		((_tempuri__CheckRuleSN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__CheckRuleSN, n);
		if (size)
			*size = n * sizeof(_tempuri__CheckRuleSN);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__CheckRuleSN*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__CheckRuleSN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__CheckRuleSN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__CheckRuleSN %p -> %p\n", q, p));
	*(_tempuri__CheckRuleSN*)p = *(_tempuri__CheckRuleSN*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SaveTestData(struct soap *soap, struct __tempuri__SaveTestData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__SaveTestData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SaveTestData(struct soap *soap, const struct __tempuri__SaveTestData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__SaveTestData(soap, &a->tempuri__SaveTestData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SaveTestData(struct soap *soap, const char *tag, int id, const struct __tempuri__SaveTestData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__SaveTestData(soap, "tempuri:SaveTestData", -1, &a->tempuri__SaveTestData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SaveTestData * SOAP_FMAC4 soap_in___tempuri__SaveTestData(struct soap *soap, const char *tag, struct __tempuri__SaveTestData *a, const char *type)
{
	size_t soap_flag_tempuri__SaveTestData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__SaveTestData *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__SaveTestData, sizeof(struct __tempuri__SaveTestData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__SaveTestData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__SaveTestData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__SaveTestData(soap, "tempuri:SaveTestData", &a->tempuri__SaveTestData, ""))
				{	soap_flag_tempuri__SaveTestData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SaveTestData(struct soap *soap, const struct __tempuri__SaveTestData *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__SaveTestData(soap, tag?tag:"-tempuri:SaveTestData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SaveTestData * SOAP_FMAC4 soap_get___tempuri__SaveTestData(struct soap *soap, struct __tempuri__SaveTestData *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__SaveTestData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__SaveTestData * SOAP_FMAC2 soap_instantiate___tempuri__SaveTestData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__SaveTestData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__SaveTestData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__SaveTestData);
		if (size)
			*size = sizeof(struct __tempuri__SaveTestData);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__SaveTestData, n);
		if (size)
			*size = n * sizeof(struct __tempuri__SaveTestData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__SaveTestData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__SaveTestData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__SaveTestData %p -> %p\n", q, p));
	*(struct __tempuri__SaveTestData*)p = *(struct __tempuri__SaveTestData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Check_USCORELogin(struct soap *soap, struct __tempuri__Check_USCORELogin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Check_USCORELogin = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Check_USCORELogin(struct soap *soap, const struct __tempuri__Check_USCORELogin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__Check_USCORELogin(soap, &a->tempuri__Check_USCORELogin);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Check_USCORELogin(struct soap *soap, const char *tag, int id, const struct __tempuri__Check_USCORELogin *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__Check_USCORELogin(soap, "tempuri:Check_Login", -1, &a->tempuri__Check_USCORELogin, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Check_USCORELogin * SOAP_FMAC4 soap_in___tempuri__Check_USCORELogin(struct soap *soap, const char *tag, struct __tempuri__Check_USCORELogin *a, const char *type)
{
	size_t soap_flag_tempuri__Check_USCORELogin = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__Check_USCORELogin *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Check_USCORELogin, sizeof(struct __tempuri__Check_USCORELogin), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Check_USCORELogin(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Check_USCORELogin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Check_USCORELogin(soap, "tempuri:Check_Login", &a->tempuri__Check_USCORELogin, ""))
				{	soap_flag_tempuri__Check_USCORELogin--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Check_USCORELogin(struct soap *soap, const struct __tempuri__Check_USCORELogin *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__Check_USCORELogin(soap, tag?tag:"-tempuri:Check_Login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Check_USCORELogin * SOAP_FMAC4 soap_get___tempuri__Check_USCORELogin(struct soap *soap, struct __tempuri__Check_USCORELogin *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Check_USCORELogin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Check_USCORELogin * SOAP_FMAC2 soap_instantiate___tempuri__Check_USCORELogin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Check_USCORELogin(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Check_USCORELogin, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__Check_USCORELogin);
		if (size)
			*size = sizeof(struct __tempuri__Check_USCORELogin);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__Check_USCORELogin, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Check_USCORELogin);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Check_USCORELogin*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Check_USCORELogin(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Check_USCORELogin %p -> %p\n", q, p));
	*(struct __tempuri__Check_USCORELogin*)p = *(struct __tempuri__Check_USCORELogin*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__saveSingleReworkResult(struct soap *soap, struct __tempuri__saveSingleReworkResult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__saveSingleReworkResult = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__saveSingleReworkResult(struct soap *soap, const struct __tempuri__saveSingleReworkResult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__saveSingleReworkResult(soap, &a->tempuri__saveSingleReworkResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__saveSingleReworkResult(struct soap *soap, const char *tag, int id, const struct __tempuri__saveSingleReworkResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__saveSingleReworkResult(soap, "tempuri:saveSingleReworkResult", -1, &a->tempuri__saveSingleReworkResult, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__saveSingleReworkResult * SOAP_FMAC4 soap_in___tempuri__saveSingleReworkResult(struct soap *soap, const char *tag, struct __tempuri__saveSingleReworkResult *a, const char *type)
{
	size_t soap_flag_tempuri__saveSingleReworkResult = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__saveSingleReworkResult *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__saveSingleReworkResult, sizeof(struct __tempuri__saveSingleReworkResult), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__saveSingleReworkResult(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__saveSingleReworkResult && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__saveSingleReworkResult(soap, "tempuri:saveSingleReworkResult", &a->tempuri__saveSingleReworkResult, ""))
				{	soap_flag_tempuri__saveSingleReworkResult--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__saveSingleReworkResult(struct soap *soap, const struct __tempuri__saveSingleReworkResult *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__saveSingleReworkResult(soap, tag?tag:"-tempuri:saveSingleReworkResult", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__saveSingleReworkResult * SOAP_FMAC4 soap_get___tempuri__saveSingleReworkResult(struct soap *soap, struct __tempuri__saveSingleReworkResult *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__saveSingleReworkResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__saveSingleReworkResult * SOAP_FMAC2 soap_instantiate___tempuri__saveSingleReworkResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__saveSingleReworkResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__saveSingleReworkResult, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__saveSingleReworkResult);
		if (size)
			*size = sizeof(struct __tempuri__saveSingleReworkResult);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__saveSingleReworkResult, n);
		if (size)
			*size = n * sizeof(struct __tempuri__saveSingleReworkResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__saveSingleReworkResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__saveSingleReworkResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__saveSingleReworkResult %p -> %p\n", q, p));
	*(struct __tempuri__saveSingleReworkResult*)p = *(struct __tempuri__saveSingleReworkResult*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__BatchBack(struct soap *soap, struct __tempuri__BatchBack *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__BatchBack = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__BatchBack(struct soap *soap, const struct __tempuri__BatchBack *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__BatchBack(soap, &a->tempuri__BatchBack);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__BatchBack(struct soap *soap, const char *tag, int id, const struct __tempuri__BatchBack *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__BatchBack(soap, "tempuri:BatchBack", -1, &a->tempuri__BatchBack, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__BatchBack * SOAP_FMAC4 soap_in___tempuri__BatchBack(struct soap *soap, const char *tag, struct __tempuri__BatchBack *a, const char *type)
{
	size_t soap_flag_tempuri__BatchBack = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__BatchBack *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__BatchBack, sizeof(struct __tempuri__BatchBack), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__BatchBack(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__BatchBack && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__BatchBack(soap, "tempuri:BatchBack", &a->tempuri__BatchBack, ""))
				{	soap_flag_tempuri__BatchBack--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__BatchBack(struct soap *soap, const struct __tempuri__BatchBack *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__BatchBack(soap, tag?tag:"-tempuri:BatchBack", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__BatchBack * SOAP_FMAC4 soap_get___tempuri__BatchBack(struct soap *soap, struct __tempuri__BatchBack *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__BatchBack(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__BatchBack * SOAP_FMAC2 soap_instantiate___tempuri__BatchBack(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__BatchBack(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__BatchBack, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__BatchBack);
		if (size)
			*size = sizeof(struct __tempuri__BatchBack);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__BatchBack, n);
		if (size)
			*size = n * sizeof(struct __tempuri__BatchBack);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__BatchBack*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__BatchBack(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__BatchBack %p -> %p\n", q, p));
	*(struct __tempuri__BatchBack*)p = *(struct __tempuri__BatchBack*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__UpdateSMTSteelNet2(struct soap *soap, struct __tempuri__UpdateSMTSteelNet2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__UpdateSMTSteelNet2 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__UpdateSMTSteelNet2(struct soap *soap, const struct __tempuri__UpdateSMTSteelNet2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__UpdateSMTSteelNet2(soap, &a->tempuri__UpdateSMTSteelNet2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__UpdateSMTSteelNet2(struct soap *soap, const char *tag, int id, const struct __tempuri__UpdateSMTSteelNet2 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__UpdateSMTSteelNet2(soap, "tempuri:UpdateSMTSteelNet2", -1, &a->tempuri__UpdateSMTSteelNet2, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__UpdateSMTSteelNet2 * SOAP_FMAC4 soap_in___tempuri__UpdateSMTSteelNet2(struct soap *soap, const char *tag, struct __tempuri__UpdateSMTSteelNet2 *a, const char *type)
{
	size_t soap_flag_tempuri__UpdateSMTSteelNet2 = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__UpdateSMTSteelNet2 *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__UpdateSMTSteelNet2, sizeof(struct __tempuri__UpdateSMTSteelNet2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__UpdateSMTSteelNet2(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__UpdateSMTSteelNet2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__UpdateSMTSteelNet2(soap, "tempuri:UpdateSMTSteelNet2", &a->tempuri__UpdateSMTSteelNet2, ""))
				{	soap_flag_tempuri__UpdateSMTSteelNet2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__UpdateSMTSteelNet2(struct soap *soap, const struct __tempuri__UpdateSMTSteelNet2 *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__UpdateSMTSteelNet2(soap, tag?tag:"-tempuri:UpdateSMTSteelNet2", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__UpdateSMTSteelNet2 * SOAP_FMAC4 soap_get___tempuri__UpdateSMTSteelNet2(struct soap *soap, struct __tempuri__UpdateSMTSteelNet2 *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__UpdateSMTSteelNet2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__UpdateSMTSteelNet2 * SOAP_FMAC2 soap_instantiate___tempuri__UpdateSMTSteelNet2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__UpdateSMTSteelNet2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__UpdateSMTSteelNet2, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__UpdateSMTSteelNet2);
		if (size)
			*size = sizeof(struct __tempuri__UpdateSMTSteelNet2);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__UpdateSMTSteelNet2, n);
		if (size)
			*size = n * sizeof(struct __tempuri__UpdateSMTSteelNet2);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__UpdateSMTSteelNet2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__UpdateSMTSteelNet2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__UpdateSMTSteelNet2 %p -> %p\n", q, p));
	*(struct __tempuri__UpdateSMTSteelNet2*)p = *(struct __tempuri__UpdateSMTSteelNet2*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__UpdateSMTSteelNet(struct soap *soap, struct __tempuri__UpdateSMTSteelNet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__UpdateSMTSteelNet = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__UpdateSMTSteelNet(struct soap *soap, const struct __tempuri__UpdateSMTSteelNet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__UpdateSMTSteelNet(soap, &a->tempuri__UpdateSMTSteelNet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__UpdateSMTSteelNet(struct soap *soap, const char *tag, int id, const struct __tempuri__UpdateSMTSteelNet *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__UpdateSMTSteelNet(soap, "tempuri:UpdateSMTSteelNet", -1, &a->tempuri__UpdateSMTSteelNet, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__UpdateSMTSteelNet * SOAP_FMAC4 soap_in___tempuri__UpdateSMTSteelNet(struct soap *soap, const char *tag, struct __tempuri__UpdateSMTSteelNet *a, const char *type)
{
	size_t soap_flag_tempuri__UpdateSMTSteelNet = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__UpdateSMTSteelNet *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__UpdateSMTSteelNet, sizeof(struct __tempuri__UpdateSMTSteelNet), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__UpdateSMTSteelNet(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__UpdateSMTSteelNet && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__UpdateSMTSteelNet(soap, "tempuri:UpdateSMTSteelNet", &a->tempuri__UpdateSMTSteelNet, ""))
				{	soap_flag_tempuri__UpdateSMTSteelNet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__UpdateSMTSteelNet(struct soap *soap, const struct __tempuri__UpdateSMTSteelNet *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__UpdateSMTSteelNet(soap, tag?tag:"-tempuri:UpdateSMTSteelNet", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__UpdateSMTSteelNet * SOAP_FMAC4 soap_get___tempuri__UpdateSMTSteelNet(struct soap *soap, struct __tempuri__UpdateSMTSteelNet *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__UpdateSMTSteelNet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__UpdateSMTSteelNet * SOAP_FMAC2 soap_instantiate___tempuri__UpdateSMTSteelNet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__UpdateSMTSteelNet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__UpdateSMTSteelNet, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__UpdateSMTSteelNet);
		if (size)
			*size = sizeof(struct __tempuri__UpdateSMTSteelNet);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__UpdateSMTSteelNet, n);
		if (size)
			*size = n * sizeof(struct __tempuri__UpdateSMTSteelNet);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__UpdateSMTSteelNet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__UpdateSMTSteelNet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__UpdateSMTSteelNet %p -> %p\n", q, p));
	*(struct __tempuri__UpdateSMTSteelNet*)p = *(struct __tempuri__UpdateSMTSteelNet*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__COMMAND_USCORECODE(struct soap *soap, struct __tempuri__COMMAND_USCORECODE *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__COMMAND_USCORECODE = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__COMMAND_USCORECODE(struct soap *soap, const struct __tempuri__COMMAND_USCORECODE *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__COMMAND_USCORECODE(soap, &a->tempuri__COMMAND_USCORECODE);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__COMMAND_USCORECODE(struct soap *soap, const char *tag, int id, const struct __tempuri__COMMAND_USCORECODE *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__COMMAND_USCORECODE(soap, "tempuri:COMMAND_CODE", -1, &a->tempuri__COMMAND_USCORECODE, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__COMMAND_USCORECODE * SOAP_FMAC4 soap_in___tempuri__COMMAND_USCORECODE(struct soap *soap, const char *tag, struct __tempuri__COMMAND_USCORECODE *a, const char *type)
{
	size_t soap_flag_tempuri__COMMAND_USCORECODE = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__COMMAND_USCORECODE *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__COMMAND_USCORECODE, sizeof(struct __tempuri__COMMAND_USCORECODE), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__COMMAND_USCORECODE(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__COMMAND_USCORECODE && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__COMMAND_USCORECODE(soap, "tempuri:COMMAND_CODE", &a->tempuri__COMMAND_USCORECODE, ""))
				{	soap_flag_tempuri__COMMAND_USCORECODE--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__COMMAND_USCORECODE(struct soap *soap, const struct __tempuri__COMMAND_USCORECODE *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__COMMAND_USCORECODE(soap, tag?tag:"-tempuri:COMMAND_CODE", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__COMMAND_USCORECODE * SOAP_FMAC4 soap_get___tempuri__COMMAND_USCORECODE(struct soap *soap, struct __tempuri__COMMAND_USCORECODE *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__COMMAND_USCORECODE(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__COMMAND_USCORECODE * SOAP_FMAC2 soap_instantiate___tempuri__COMMAND_USCORECODE(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__COMMAND_USCORECODE(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__COMMAND_USCORECODE, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__COMMAND_USCORECODE);
		if (size)
			*size = sizeof(struct __tempuri__COMMAND_USCORECODE);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__COMMAND_USCORECODE, n);
		if (size)
			*size = n * sizeof(struct __tempuri__COMMAND_USCORECODE);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__COMMAND_USCORECODE*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__COMMAND_USCORECODE(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__COMMAND_USCORECODE %p -> %p\n", q, p));
	*(struct __tempuri__COMMAND_USCORECODE*)p = *(struct __tempuri__COMMAND_USCORECODE*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__CheckRuleSN(struct soap *soap, struct __tempuri__CheckRuleSN *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__CheckRuleSN = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__CheckRuleSN(struct soap *soap, const struct __tempuri__CheckRuleSN *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__CheckRuleSN(soap, &a->tempuri__CheckRuleSN);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__CheckRuleSN(struct soap *soap, const char *tag, int id, const struct __tempuri__CheckRuleSN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__CheckRuleSN(soap, "tempuri:CheckRuleSN", -1, &a->tempuri__CheckRuleSN, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__CheckRuleSN * SOAP_FMAC4 soap_in___tempuri__CheckRuleSN(struct soap *soap, const char *tag, struct __tempuri__CheckRuleSN *a, const char *type)
{
	size_t soap_flag_tempuri__CheckRuleSN = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__CheckRuleSN *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__CheckRuleSN, sizeof(struct __tempuri__CheckRuleSN), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__CheckRuleSN(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__CheckRuleSN && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__CheckRuleSN(soap, "tempuri:CheckRuleSN", &a->tempuri__CheckRuleSN, ""))
				{	soap_flag_tempuri__CheckRuleSN--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__CheckRuleSN(struct soap *soap, const struct __tempuri__CheckRuleSN *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__CheckRuleSN(soap, tag?tag:"-tempuri:CheckRuleSN", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__CheckRuleSN * SOAP_FMAC4 soap_get___tempuri__CheckRuleSN(struct soap *soap, struct __tempuri__CheckRuleSN *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__CheckRuleSN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__CheckRuleSN * SOAP_FMAC2 soap_instantiate___tempuri__CheckRuleSN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__CheckRuleSN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__CheckRuleSN, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__CheckRuleSN);
		if (size)
			*size = sizeof(struct __tempuri__CheckRuleSN);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__CheckRuleSN, n);
		if (size)
			*size = n * sizeof(struct __tempuri__CheckRuleSN);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__CheckRuleSN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__CheckRuleSN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__CheckRuleSN %p -> %p\n", q, p));
	*(struct __tempuri__CheckRuleSN*)p = *(struct __tempuri__CheckRuleSN*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SaveTestData(struct soap *soap, _tempuri__SaveTestData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__SaveTestData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SaveTestData(struct soap *soap, const char *tag, int id, _tempuri__SaveTestData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__SaveTestData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__SaveTestData ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SaveTestData(struct soap *soap, const char *tag, _tempuri__SaveTestData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__SaveTestData **)soap_malloc(soap, sizeof(_tempuri__SaveTestData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__SaveTestData *)soap_instantiate__tempuri__SaveTestData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__SaveTestData ** p = (_tempuri__SaveTestData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__SaveTestData, sizeof(_tempuri__SaveTestData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SaveTestData(struct soap *soap, _tempuri__SaveTestData *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__SaveTestData);
	if (soap_out_PointerTo_tempuri__SaveTestData(soap, tag?tag:"tempuri:SaveTestData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__SaveTestData ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SaveTestData(struct soap *soap, _tempuri__SaveTestData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__SaveTestData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Check_USCORELogin(struct soap *soap, _tempuri__Check_USCORELogin *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Check_USCORELogin))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Check_USCORELogin(struct soap *soap, const char *tag, int id, _tempuri__Check_USCORELogin *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Check_USCORELogin);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Check_USCORELogin ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Check_USCORELogin(struct soap *soap, const char *tag, _tempuri__Check_USCORELogin **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Check_USCORELogin **)soap_malloc(soap, sizeof(_tempuri__Check_USCORELogin *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Check_USCORELogin *)soap_instantiate__tempuri__Check_USCORELogin(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Check_USCORELogin ** p = (_tempuri__Check_USCORELogin **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Check_USCORELogin, sizeof(_tempuri__Check_USCORELogin), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Check_USCORELogin(struct soap *soap, _tempuri__Check_USCORELogin *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__Check_USCORELogin);
	if (soap_out_PointerTo_tempuri__Check_USCORELogin(soap, tag?tag:"tempuri:Check_Login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Check_USCORELogin ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Check_USCORELogin(struct soap *soap, _tempuri__Check_USCORELogin **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Check_USCORELogin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__saveSingleReworkResult(struct soap *soap, _tempuri__saveSingleReworkResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__saveSingleReworkResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__saveSingleReworkResult(struct soap *soap, const char *tag, int id, _tempuri__saveSingleReworkResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__saveSingleReworkResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__saveSingleReworkResult ** SOAP_FMAC4 soap_in_PointerTo_tempuri__saveSingleReworkResult(struct soap *soap, const char *tag, _tempuri__saveSingleReworkResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__saveSingleReworkResult **)soap_malloc(soap, sizeof(_tempuri__saveSingleReworkResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__saveSingleReworkResult *)soap_instantiate__tempuri__saveSingleReworkResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__saveSingleReworkResult ** p = (_tempuri__saveSingleReworkResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__saveSingleReworkResult, sizeof(_tempuri__saveSingleReworkResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__saveSingleReworkResult(struct soap *soap, _tempuri__saveSingleReworkResult *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__saveSingleReworkResult);
	if (soap_out_PointerTo_tempuri__saveSingleReworkResult(soap, tag?tag:"tempuri:saveSingleReworkResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__saveSingleReworkResult ** SOAP_FMAC4 soap_get_PointerTo_tempuri__saveSingleReworkResult(struct soap *soap, _tempuri__saveSingleReworkResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__saveSingleReworkResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__BatchBack(struct soap *soap, _tempuri__BatchBack *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__BatchBack))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__BatchBack(struct soap *soap, const char *tag, int id, _tempuri__BatchBack *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__BatchBack);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__BatchBack ** SOAP_FMAC4 soap_in_PointerTo_tempuri__BatchBack(struct soap *soap, const char *tag, _tempuri__BatchBack **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__BatchBack **)soap_malloc(soap, sizeof(_tempuri__BatchBack *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__BatchBack *)soap_instantiate__tempuri__BatchBack(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__BatchBack ** p = (_tempuri__BatchBack **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__BatchBack, sizeof(_tempuri__BatchBack), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__BatchBack(struct soap *soap, _tempuri__BatchBack *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__BatchBack);
	if (soap_out_PointerTo_tempuri__BatchBack(soap, tag?tag:"tempuri:BatchBack", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__BatchBack ** SOAP_FMAC4 soap_get_PointerTo_tempuri__BatchBack(struct soap *soap, _tempuri__BatchBack **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__BatchBack(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__UpdateSMTSteelNet2(struct soap *soap, _tempuri__UpdateSMTSteelNet2 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__UpdateSMTSteelNet2))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__UpdateSMTSteelNet2(struct soap *soap, const char *tag, int id, _tempuri__UpdateSMTSteelNet2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__UpdateSMTSteelNet2);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2 ** SOAP_FMAC4 soap_in_PointerTo_tempuri__UpdateSMTSteelNet2(struct soap *soap, const char *tag, _tempuri__UpdateSMTSteelNet2 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__UpdateSMTSteelNet2 **)soap_malloc(soap, sizeof(_tempuri__UpdateSMTSteelNet2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__UpdateSMTSteelNet2 *)soap_instantiate__tempuri__UpdateSMTSteelNet2(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__UpdateSMTSteelNet2 ** p = (_tempuri__UpdateSMTSteelNet2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__UpdateSMTSteelNet2, sizeof(_tempuri__UpdateSMTSteelNet2), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__UpdateSMTSteelNet2(struct soap *soap, _tempuri__UpdateSMTSteelNet2 *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet2);
	if (soap_out_PointerTo_tempuri__UpdateSMTSteelNet2(soap, tag?tag:"tempuri:UpdateSMTSteelNet2", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2 ** SOAP_FMAC4 soap_get_PointerTo_tempuri__UpdateSMTSteelNet2(struct soap *soap, _tempuri__UpdateSMTSteelNet2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__UpdateSMTSteelNet2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__UpdateSMTSteelNet(struct soap *soap, _tempuri__UpdateSMTSteelNet *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__UpdateSMTSteelNet))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__UpdateSMTSteelNet(struct soap *soap, const char *tag, int id, _tempuri__UpdateSMTSteelNet *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__UpdateSMTSteelNet);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet ** SOAP_FMAC4 soap_in_PointerTo_tempuri__UpdateSMTSteelNet(struct soap *soap, const char *tag, _tempuri__UpdateSMTSteelNet **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__UpdateSMTSteelNet **)soap_malloc(soap, sizeof(_tempuri__UpdateSMTSteelNet *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__UpdateSMTSteelNet *)soap_instantiate__tempuri__UpdateSMTSteelNet(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__UpdateSMTSteelNet ** p = (_tempuri__UpdateSMTSteelNet **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__UpdateSMTSteelNet, sizeof(_tempuri__UpdateSMTSteelNet), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__UpdateSMTSteelNet(struct soap *soap, _tempuri__UpdateSMTSteelNet *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet);
	if (soap_out_PointerTo_tempuri__UpdateSMTSteelNet(soap, tag?tag:"tempuri:UpdateSMTSteelNet", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet ** SOAP_FMAC4 soap_get_PointerTo_tempuri__UpdateSMTSteelNet(struct soap *soap, _tempuri__UpdateSMTSteelNet **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__UpdateSMTSteelNet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__COMMAND_USCORECODE(struct soap *soap, _tempuri__COMMAND_USCORECODE *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__COMMAND_USCORECODE))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__COMMAND_USCORECODE(struct soap *soap, const char *tag, int id, _tempuri__COMMAND_USCORECODE *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__COMMAND_USCORECODE);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__COMMAND_USCORECODE ** SOAP_FMAC4 soap_in_PointerTo_tempuri__COMMAND_USCORECODE(struct soap *soap, const char *tag, _tempuri__COMMAND_USCORECODE **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__COMMAND_USCORECODE **)soap_malloc(soap, sizeof(_tempuri__COMMAND_USCORECODE *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__COMMAND_USCORECODE *)soap_instantiate__tempuri__COMMAND_USCORECODE(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__COMMAND_USCORECODE ** p = (_tempuri__COMMAND_USCORECODE **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__COMMAND_USCORECODE, sizeof(_tempuri__COMMAND_USCORECODE), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__COMMAND_USCORECODE(struct soap *soap, _tempuri__COMMAND_USCORECODE *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__COMMAND_USCORECODE);
	if (soap_out_PointerTo_tempuri__COMMAND_USCORECODE(soap, tag?tag:"tempuri:COMMAND_CODE", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__COMMAND_USCORECODE ** SOAP_FMAC4 soap_get_PointerTo_tempuri__COMMAND_USCORECODE(struct soap *soap, _tempuri__COMMAND_USCORECODE **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__COMMAND_USCORECODE(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__CheckRuleSN(struct soap *soap, _tempuri__CheckRuleSN *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__CheckRuleSN))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__CheckRuleSN(struct soap *soap, const char *tag, int id, _tempuri__CheckRuleSN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__CheckRuleSN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__CheckRuleSN ** SOAP_FMAC4 soap_in_PointerTo_tempuri__CheckRuleSN(struct soap *soap, const char *tag, _tempuri__CheckRuleSN **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__CheckRuleSN **)soap_malloc(soap, sizeof(_tempuri__CheckRuleSN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__CheckRuleSN *)soap_instantiate__tempuri__CheckRuleSN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__CheckRuleSN ** p = (_tempuri__CheckRuleSN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__CheckRuleSN, sizeof(_tempuri__CheckRuleSN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__CheckRuleSN(struct soap *soap, _tempuri__CheckRuleSN *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__CheckRuleSN);
	if (soap_out_PointerTo_tempuri__CheckRuleSN(soap, tag?tag:"tempuri:CheckRuleSN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__CheckRuleSN ** SOAP_FMAC4 soap_get_PointerTo_tempuri__CheckRuleSN(struct soap *soap, _tempuri__CheckRuleSN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__CheckRuleSN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
