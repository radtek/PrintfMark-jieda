/* soapBasicHttpBinding_USCOREIFoxlinkAddService.cpp
   Generated by gSOAP 2.8.22 from foxlinkadd.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapBasicHttpBinding_USCOREIFoxlinkAddService.h"

BasicHttpBinding_USCOREIFoxlinkAddService::BasicHttpBinding_USCOREIFoxlinkAddService()
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIFoxlinkAddService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BasicHttpBinding_USCOREIFoxlinkAddService::BasicHttpBinding_USCOREIFoxlinkAddService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	BasicHttpBinding_USCOREIFoxlinkAddService_init(_soap->imode, _soap->omode);
}

BasicHttpBinding_USCOREIFoxlinkAddService::BasicHttpBinding_USCOREIFoxlinkAddService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIFoxlinkAddService_init(iomode, iomode);
}

BasicHttpBinding_USCOREIFoxlinkAddService::BasicHttpBinding_USCOREIFoxlinkAddService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIFoxlinkAddService_init(imode, omode);
}

BasicHttpBinding_USCOREIFoxlinkAddService::~BasicHttpBinding_USCOREIFoxlinkAddService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void BasicHttpBinding_USCOREIFoxlinkAddService::BasicHttpBinding_USCOREIFoxlinkAddService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"tempuri", "http://tempuri.org/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void BasicHttpBinding_USCOREIFoxlinkAddService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void BasicHttpBinding_USCOREIFoxlinkAddService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	BasicHttpBinding_USCOREIFoxlinkAddService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
BasicHttpBinding_USCOREIFoxlinkAddService *BasicHttpBinding_USCOREIFoxlinkAddService::copy()
{	BasicHttpBinding_USCOREIFoxlinkAddService *dup = SOAP_NEW_COPY(BasicHttpBinding_USCOREIFoxlinkAddService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int BasicHttpBinding_USCOREIFoxlinkAddService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int BasicHttpBinding_USCOREIFoxlinkAddService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int BasicHttpBinding_USCOREIFoxlinkAddService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int BasicHttpBinding_USCOREIFoxlinkAddService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int BasicHttpBinding_USCOREIFoxlinkAddService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int BasicHttpBinding_USCOREIFoxlinkAddService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void BasicHttpBinding_USCOREIFoxlinkAddService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void BasicHttpBinding_USCOREIFoxlinkAddService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *BasicHttpBinding_USCOREIFoxlinkAddService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void BasicHttpBinding_USCOREIFoxlinkAddService::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *BasicHttpBinding_USCOREIFoxlinkAddService::soap_header()
{	return this->soap->header;
}

int BasicHttpBinding_USCOREIFoxlinkAddService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				break;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	return this->soap->error;
}

SOAP_SOCKET BasicHttpBinding_USCOREIFoxlinkAddService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET BasicHttpBinding_USCOREIFoxlinkAddService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int BasicHttpBinding_USCOREIFoxlinkAddService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int BasicHttpBinding_USCOREIFoxlinkAddService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___tempuri__CheckRuleSN(struct soap*, BasicHttpBinding_USCOREIFoxlinkAddService*);
static int serve___tempuri__COMMAND_USCORECODE(struct soap*, BasicHttpBinding_USCOREIFoxlinkAddService*);
static int serve___tempuri__UpdateSMTSteelNet(struct soap*, BasicHttpBinding_USCOREIFoxlinkAddService*);
static int serve___tempuri__UpdateSMTSteelNet2(struct soap*, BasicHttpBinding_USCOREIFoxlinkAddService*);
static int serve___tempuri__BatchBack(struct soap*, BasicHttpBinding_USCOREIFoxlinkAddService*);
static int serve___tempuri__saveSingleReworkResult(struct soap*, BasicHttpBinding_USCOREIFoxlinkAddService*);
static int serve___tempuri__Check_USCORELogin(struct soap*, BasicHttpBinding_USCOREIFoxlinkAddService*);
static int serve___tempuri__SaveTestData(struct soap*, BasicHttpBinding_USCOREIFoxlinkAddService*);

int BasicHttpBinding_USCOREIFoxlinkAddService::dispatch()
{	return dispatch(this->soap);
}

int BasicHttpBinding_USCOREIFoxlinkAddService::dispatch(struct soap* soap)
{	BasicHttpBinding_USCOREIFoxlinkAddService_init(soap->imode, soap->omode);
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "tempuri:CheckRuleSN"))
		return serve___tempuri__CheckRuleSN(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:COMMAND_CODE"))
		return serve___tempuri__COMMAND_USCORECODE(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:UpdateSMTSteelNet"))
		return serve___tempuri__UpdateSMTSteelNet(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:UpdateSMTSteelNet2"))
		return serve___tempuri__UpdateSMTSteelNet2(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:BatchBack"))
		return serve___tempuri__BatchBack(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:saveSingleReworkResult"))
		return serve___tempuri__saveSingleReworkResult(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:Check_Login"))
		return serve___tempuri__Check_USCORELogin(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:SaveTestData"))
		return serve___tempuri__SaveTestData(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___tempuri__CheckRuleSN(struct soap *soap, BasicHttpBinding_USCOREIFoxlinkAddService *service)
{	struct __tempuri__CheckRuleSN soap_tmp___tempuri__CheckRuleSN;
	_tempuri__CheckRuleSNResponse tempuri__CheckRuleSNResponse;
	tempuri__CheckRuleSNResponse.soap_default(soap);
	soap_default___tempuri__CheckRuleSN(soap, &soap_tmp___tempuri__CheckRuleSN);
	if (!soap_get___tempuri__CheckRuleSN(soap, &soap_tmp___tempuri__CheckRuleSN, "-tempuri:CheckRuleSN", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CheckRuleSN(soap_tmp___tempuri__CheckRuleSN.tempuri__CheckRuleSN, tempuri__CheckRuleSNResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__CheckRuleSNResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__CheckRuleSNResponse.soap_put(soap, "tempuri:CheckRuleSNResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__CheckRuleSNResponse.soap_put(soap, "tempuri:CheckRuleSNResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__COMMAND_USCORECODE(struct soap *soap, BasicHttpBinding_USCOREIFoxlinkAddService *service)
{	struct __tempuri__COMMAND_USCORECODE soap_tmp___tempuri__COMMAND_USCORECODE;
	_tempuri__COMMAND_USCORECODEResponse tempuri__COMMAND_USCORECODEResponse;
	tempuri__COMMAND_USCORECODEResponse.soap_default(soap);
	soap_default___tempuri__COMMAND_USCORECODE(soap, &soap_tmp___tempuri__COMMAND_USCORECODE);
	if (!soap_get___tempuri__COMMAND_USCORECODE(soap, &soap_tmp___tempuri__COMMAND_USCORECODE, "-tempuri:COMMAND_CODE", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->COMMAND_USCORECODE(soap_tmp___tempuri__COMMAND_USCORECODE.tempuri__COMMAND_USCORECODE, tempuri__COMMAND_USCORECODEResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__COMMAND_USCORECODEResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__COMMAND_USCORECODEResponse.soap_put(soap, "tempuri:COMMAND_CODEResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__COMMAND_USCORECODEResponse.soap_put(soap, "tempuri:COMMAND_CODEResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__UpdateSMTSteelNet(struct soap *soap, BasicHttpBinding_USCOREIFoxlinkAddService *service)
{	struct __tempuri__UpdateSMTSteelNet soap_tmp___tempuri__UpdateSMTSteelNet;
	_tempuri__UpdateSMTSteelNetResponse tempuri__UpdateSMTSteelNetResponse;
	tempuri__UpdateSMTSteelNetResponse.soap_default(soap);
	soap_default___tempuri__UpdateSMTSteelNet(soap, &soap_tmp___tempuri__UpdateSMTSteelNet);
	if (!soap_get___tempuri__UpdateSMTSteelNet(soap, &soap_tmp___tempuri__UpdateSMTSteelNet, "-tempuri:UpdateSMTSteelNet", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->UpdateSMTSteelNet(soap_tmp___tempuri__UpdateSMTSteelNet.tempuri__UpdateSMTSteelNet, tempuri__UpdateSMTSteelNetResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__UpdateSMTSteelNetResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__UpdateSMTSteelNetResponse.soap_put(soap, "tempuri:UpdateSMTSteelNetResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__UpdateSMTSteelNetResponse.soap_put(soap, "tempuri:UpdateSMTSteelNetResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__UpdateSMTSteelNet2(struct soap *soap, BasicHttpBinding_USCOREIFoxlinkAddService *service)
{	struct __tempuri__UpdateSMTSteelNet2 soap_tmp___tempuri__UpdateSMTSteelNet2;
	_tempuri__UpdateSMTSteelNet2Response tempuri__UpdateSMTSteelNet2Response;
	tempuri__UpdateSMTSteelNet2Response.soap_default(soap);
	soap_default___tempuri__UpdateSMTSteelNet2(soap, &soap_tmp___tempuri__UpdateSMTSteelNet2);
	if (!soap_get___tempuri__UpdateSMTSteelNet2(soap, &soap_tmp___tempuri__UpdateSMTSteelNet2, "-tempuri:UpdateSMTSteelNet2", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->UpdateSMTSteelNet2(soap_tmp___tempuri__UpdateSMTSteelNet2.tempuri__UpdateSMTSteelNet2, tempuri__UpdateSMTSteelNet2Response);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__UpdateSMTSteelNet2Response.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__UpdateSMTSteelNet2Response.soap_put(soap, "tempuri:UpdateSMTSteelNet2Response", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__UpdateSMTSteelNet2Response.soap_put(soap, "tempuri:UpdateSMTSteelNet2Response", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__BatchBack(struct soap *soap, BasicHttpBinding_USCOREIFoxlinkAddService *service)
{	struct __tempuri__BatchBack soap_tmp___tempuri__BatchBack;
	_tempuri__BatchBackResponse tempuri__BatchBackResponse;
	tempuri__BatchBackResponse.soap_default(soap);
	soap_default___tempuri__BatchBack(soap, &soap_tmp___tempuri__BatchBack);
	if (!soap_get___tempuri__BatchBack(soap, &soap_tmp___tempuri__BatchBack, "-tempuri:BatchBack", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->BatchBack(soap_tmp___tempuri__BatchBack.tempuri__BatchBack, tempuri__BatchBackResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__BatchBackResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__BatchBackResponse.soap_put(soap, "tempuri:BatchBackResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__BatchBackResponse.soap_put(soap, "tempuri:BatchBackResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__saveSingleReworkResult(struct soap *soap, BasicHttpBinding_USCOREIFoxlinkAddService *service)
{	struct __tempuri__saveSingleReworkResult soap_tmp___tempuri__saveSingleReworkResult;
	_tempuri__saveSingleReworkResultResponse tempuri__saveSingleReworkResultResponse;
	tempuri__saveSingleReworkResultResponse.soap_default(soap);
	soap_default___tempuri__saveSingleReworkResult(soap, &soap_tmp___tempuri__saveSingleReworkResult);
	if (!soap_get___tempuri__saveSingleReworkResult(soap, &soap_tmp___tempuri__saveSingleReworkResult, "-tempuri:saveSingleReworkResult", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->saveSingleReworkResult(soap_tmp___tempuri__saveSingleReworkResult.tempuri__saveSingleReworkResult, tempuri__saveSingleReworkResultResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__saveSingleReworkResultResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__saveSingleReworkResultResponse.soap_put(soap, "tempuri:saveSingleReworkResultResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__saveSingleReworkResultResponse.soap_put(soap, "tempuri:saveSingleReworkResultResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Check_USCORELogin(struct soap *soap, BasicHttpBinding_USCOREIFoxlinkAddService *service)
{	struct __tempuri__Check_USCORELogin soap_tmp___tempuri__Check_USCORELogin;
	_tempuri__Check_USCORELoginResponse tempuri__Check_USCORELoginResponse;
	tempuri__Check_USCORELoginResponse.soap_default(soap);
	soap_default___tempuri__Check_USCORELogin(soap, &soap_tmp___tempuri__Check_USCORELogin);
	if (!soap_get___tempuri__Check_USCORELogin(soap, &soap_tmp___tempuri__Check_USCORELogin, "-tempuri:Check_Login", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Check_USCORELogin(soap_tmp___tempuri__Check_USCORELogin.tempuri__Check_USCORELogin, tempuri__Check_USCORELoginResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__Check_USCORELoginResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__Check_USCORELoginResponse.soap_put(soap, "tempuri:Check_LoginResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__Check_USCORELoginResponse.soap_put(soap, "tempuri:Check_LoginResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__SaveTestData(struct soap *soap, BasicHttpBinding_USCOREIFoxlinkAddService *service)
{	struct __tempuri__SaveTestData soap_tmp___tempuri__SaveTestData;
	_tempuri__SaveTestDataResponse tempuri__SaveTestDataResponse;
	tempuri__SaveTestDataResponse.soap_default(soap);
	soap_default___tempuri__SaveTestData(soap, &soap_tmp___tempuri__SaveTestData);
	if (!soap_get___tempuri__SaveTestData(soap, &soap_tmp___tempuri__SaveTestData, "-tempuri:SaveTestData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SaveTestData(soap_tmp___tempuri__SaveTestData.tempuri__SaveTestData, tempuri__SaveTestDataResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__SaveTestDataResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__SaveTestDataResponse.soap_put(soap, "tempuri:SaveTestDataResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__SaveTestDataResponse.soap_put(soap, "tempuri:SaveTestDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
