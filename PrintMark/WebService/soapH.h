/* soapH.h
   Generated by gSOAP 2.8.22 from foxlinkadd.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__SaveTestDataResponse
#define SOAP_TYPE__tempuri__SaveTestDataResponse (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SaveTestDataResponse(struct soap*, const char*, int, const _tempuri__SaveTestDataResponse *, const char*);
SOAP_FMAC3 _tempuri__SaveTestDataResponse * SOAP_FMAC4 soap_in__tempuri__SaveTestDataResponse(struct soap*, const char*, _tempuri__SaveTestDataResponse *, const char*);

#ifndef soap_write__tempuri__SaveTestDataResponse
#define soap_write__tempuri__SaveTestDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:SaveTestDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__SaveTestDataResponse * SOAP_FMAC4 soap_get__tempuri__SaveTestDataResponse(struct soap*, _tempuri__SaveTestDataResponse *, const char*, const char*);

#ifndef soap_read__tempuri__SaveTestDataResponse
#define soap_read__tempuri__SaveTestDataResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__SaveTestDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__SaveTestDataResponse * SOAP_FMAC2 soap_instantiate__tempuri__SaveTestDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SaveTestDataResponse * soap_new__tempuri__SaveTestDataResponse(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__SaveTestDataResponse(soap, n, NULL, NULL, NULL); }

inline _tempuri__SaveTestDataResponse * soap_new_req__tempuri__SaveTestDataResponse(struct soap *soap) { _tempuri__SaveTestDataResponse *_p = soap_instantiate__tempuri__SaveTestDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__SaveTestDataResponse * soap_new_set__tempuri__SaveTestDataResponse(struct soap *soap, std::string *SaveTestDataResult) { _tempuri__SaveTestDataResponse *_p = soap_instantiate__tempuri__SaveTestDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__SaveTestDataResponse::SaveTestDataResult = SaveTestDataResult; } return _p; }

inline void soap_delete__tempuri__SaveTestDataResponse(struct soap *soap, _tempuri__SaveTestDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SaveTestDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__SaveTestData
#define SOAP_TYPE__tempuri__SaveTestData (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SaveTestData(struct soap*, const char*, int, const _tempuri__SaveTestData *, const char*);
SOAP_FMAC3 _tempuri__SaveTestData * SOAP_FMAC4 soap_in__tempuri__SaveTestData(struct soap*, const char*, _tempuri__SaveTestData *, const char*);

#ifndef soap_write__tempuri__SaveTestData
#define soap_write__tempuri__SaveTestData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:SaveTestData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__SaveTestData * SOAP_FMAC4 soap_get__tempuri__SaveTestData(struct soap*, _tempuri__SaveTestData *, const char*, const char*);

#ifndef soap_read__tempuri__SaveTestData
#define soap_read__tempuri__SaveTestData(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__SaveTestData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__SaveTestData * SOAP_FMAC2 soap_instantiate__tempuri__SaveTestData(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SaveTestData * soap_new__tempuri__SaveTestData(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__SaveTestData(soap, n, NULL, NULL, NULL); }

inline _tempuri__SaveTestData * soap_new_req__tempuri__SaveTestData(struct soap *soap) { _tempuri__SaveTestData *_p = soap_instantiate__tempuri__SaveTestData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__SaveTestData * soap_new_set__tempuri__SaveTestData(struct soap *soap, std::string *strData) { _tempuri__SaveTestData *_p = soap_instantiate__tempuri__SaveTestData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__SaveTestData::strData = strData; } return _p; }

inline void soap_delete__tempuri__SaveTestData(struct soap *soap, _tempuri__SaveTestData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SaveTestData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__Check_USCORELoginResponse
#define SOAP_TYPE__tempuri__Check_USCORELoginResponse (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Check_USCORELoginResponse(struct soap*, const char*, int, const _tempuri__Check_USCORELoginResponse *, const char*);
SOAP_FMAC3 _tempuri__Check_USCORELoginResponse * SOAP_FMAC4 soap_in__tempuri__Check_USCORELoginResponse(struct soap*, const char*, _tempuri__Check_USCORELoginResponse *, const char*);

#ifndef soap_write__tempuri__Check_USCORELoginResponse
#define soap_write__tempuri__Check_USCORELoginResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:Check_LoginResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__Check_USCORELoginResponse * SOAP_FMAC4 soap_get__tempuri__Check_USCORELoginResponse(struct soap*, _tempuri__Check_USCORELoginResponse *, const char*, const char*);

#ifndef soap_read__tempuri__Check_USCORELoginResponse
#define soap_read__tempuri__Check_USCORELoginResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__Check_USCORELoginResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__Check_USCORELoginResponse * SOAP_FMAC2 soap_instantiate__tempuri__Check_USCORELoginResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__Check_USCORELoginResponse * soap_new__tempuri__Check_USCORELoginResponse(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__Check_USCORELoginResponse(soap, n, NULL, NULL, NULL); }

inline _tempuri__Check_USCORELoginResponse * soap_new_req__tempuri__Check_USCORELoginResponse(struct soap *soap) { _tempuri__Check_USCORELoginResponse *_p = soap_instantiate__tempuri__Check_USCORELoginResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__Check_USCORELoginResponse * soap_new_set__tempuri__Check_USCORELoginResponse(struct soap *soap, std::string *Check_USCORELoginResult) { _tempuri__Check_USCORELoginResponse *_p = soap_instantiate__tempuri__Check_USCORELoginResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__Check_USCORELoginResponse::Check_USCORELoginResult = Check_USCORELoginResult; } return _p; }

inline void soap_delete__tempuri__Check_USCORELoginResponse(struct soap *soap, _tempuri__Check_USCORELoginResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Check_USCORELoginResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__Check_USCORELogin
#define SOAP_TYPE__tempuri__Check_USCORELogin (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Check_USCORELogin(struct soap*, const char*, int, const _tempuri__Check_USCORELogin *, const char*);
SOAP_FMAC3 _tempuri__Check_USCORELogin * SOAP_FMAC4 soap_in__tempuri__Check_USCORELogin(struct soap*, const char*, _tempuri__Check_USCORELogin *, const char*);

#ifndef soap_write__tempuri__Check_USCORELogin
#define soap_write__tempuri__Check_USCORELogin(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:Check_Login", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__Check_USCORELogin * SOAP_FMAC4 soap_get__tempuri__Check_USCORELogin(struct soap*, _tempuri__Check_USCORELogin *, const char*, const char*);

#ifndef soap_read__tempuri__Check_USCORELogin
#define soap_read__tempuri__Check_USCORELogin(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__Check_USCORELogin(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__Check_USCORELogin * SOAP_FMAC2 soap_instantiate__tempuri__Check_USCORELogin(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__Check_USCORELogin * soap_new__tempuri__Check_USCORELogin(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__Check_USCORELogin(soap, n, NULL, NULL, NULL); }

inline _tempuri__Check_USCORELogin * soap_new_req__tempuri__Check_USCORELogin(struct soap *soap) { _tempuri__Check_USCORELogin *_p = soap_instantiate__tempuri__Check_USCORELogin(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__Check_USCORELogin * soap_new_set__tempuri__Check_USCORELogin(struct soap *soap, std::string *strUser, std::string *strPwd) { _tempuri__Check_USCORELogin *_p = soap_instantiate__tempuri__Check_USCORELogin(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__Check_USCORELogin::strUser = strUser; _p->_tempuri__Check_USCORELogin::strPwd = strPwd; } return _p; }

inline void soap_delete__tempuri__Check_USCORELogin(struct soap *soap, _tempuri__Check_USCORELogin *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Check_USCORELogin(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__saveSingleReworkResultResponse
#define SOAP_TYPE__tempuri__saveSingleReworkResultResponse (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__saveSingleReworkResultResponse(struct soap*, const char*, int, const _tempuri__saveSingleReworkResultResponse *, const char*);
SOAP_FMAC3 _tempuri__saveSingleReworkResultResponse * SOAP_FMAC4 soap_in__tempuri__saveSingleReworkResultResponse(struct soap*, const char*, _tempuri__saveSingleReworkResultResponse *, const char*);

#ifndef soap_write__tempuri__saveSingleReworkResultResponse
#define soap_write__tempuri__saveSingleReworkResultResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:saveSingleReworkResultResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__saveSingleReworkResultResponse * SOAP_FMAC4 soap_get__tempuri__saveSingleReworkResultResponse(struct soap*, _tempuri__saveSingleReworkResultResponse *, const char*, const char*);

#ifndef soap_read__tempuri__saveSingleReworkResultResponse
#define soap_read__tempuri__saveSingleReworkResultResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__saveSingleReworkResultResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__saveSingleReworkResultResponse * SOAP_FMAC2 soap_instantiate__tempuri__saveSingleReworkResultResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__saveSingleReworkResultResponse * soap_new__tempuri__saveSingleReworkResultResponse(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__saveSingleReworkResultResponse(soap, n, NULL, NULL, NULL); }

inline _tempuri__saveSingleReworkResultResponse * soap_new_req__tempuri__saveSingleReworkResultResponse(struct soap *soap) { _tempuri__saveSingleReworkResultResponse *_p = soap_instantiate__tempuri__saveSingleReworkResultResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__saveSingleReworkResultResponse * soap_new_set__tempuri__saveSingleReworkResultResponse(struct soap *soap, std::string *saveSingleReworkResultResult) { _tempuri__saveSingleReworkResultResponse *_p = soap_instantiate__tempuri__saveSingleReworkResultResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__saveSingleReworkResultResponse::saveSingleReworkResultResult = saveSingleReworkResultResult; } return _p; }

inline void soap_delete__tempuri__saveSingleReworkResultResponse(struct soap *soap, _tempuri__saveSingleReworkResultResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__saveSingleReworkResultResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__saveSingleReworkResult
#define SOAP_TYPE__tempuri__saveSingleReworkResult (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__saveSingleReworkResult(struct soap*, const char*, int, const _tempuri__saveSingleReworkResult *, const char*);
SOAP_FMAC3 _tempuri__saveSingleReworkResult * SOAP_FMAC4 soap_in__tempuri__saveSingleReworkResult(struct soap*, const char*, _tempuri__saveSingleReworkResult *, const char*);

#ifndef soap_write__tempuri__saveSingleReworkResult
#define soap_write__tempuri__saveSingleReworkResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:saveSingleReworkResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__saveSingleReworkResult * SOAP_FMAC4 soap_get__tempuri__saveSingleReworkResult(struct soap*, _tempuri__saveSingleReworkResult *, const char*, const char*);

#ifndef soap_read__tempuri__saveSingleReworkResult
#define soap_read__tempuri__saveSingleReworkResult(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__saveSingleReworkResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__saveSingleReworkResult * SOAP_FMAC2 soap_instantiate__tempuri__saveSingleReworkResult(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__saveSingleReworkResult * soap_new__tempuri__saveSingleReworkResult(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__saveSingleReworkResult(soap, n, NULL, NULL, NULL); }

inline _tempuri__saveSingleReworkResult * soap_new_req__tempuri__saveSingleReworkResult(struct soap *soap) { _tempuri__saveSingleReworkResult *_p = soap_instantiate__tempuri__saveSingleReworkResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__saveSingleReworkResult * soap_new_set__tempuri__saveSingleReworkResult(struct soap *soap, std::string *strEMP_USCORENO, int *intSTART_USCOREGROUP_USCORECODE, std::string *strECN_USCOREMEMO, std::string *strSERIAL_USCORENUMBER, std::string *strVERSION_USCORECODE) { _tempuri__saveSingleReworkResult *_p = soap_instantiate__tempuri__saveSingleReworkResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__saveSingleReworkResult::strEMP_USCORENO = strEMP_USCORENO; _p->_tempuri__saveSingleReworkResult::intSTART_USCOREGROUP_USCORECODE = intSTART_USCOREGROUP_USCORECODE; _p->_tempuri__saveSingleReworkResult::strECN_USCOREMEMO = strECN_USCOREMEMO; _p->_tempuri__saveSingleReworkResult::strSERIAL_USCORENUMBER = strSERIAL_USCORENUMBER; _p->_tempuri__saveSingleReworkResult::strVERSION_USCORECODE = strVERSION_USCORECODE; } return _p; }

inline void soap_delete__tempuri__saveSingleReworkResult(struct soap *soap, _tempuri__saveSingleReworkResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__saveSingleReworkResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__BatchBackResponse
#define SOAP_TYPE__tempuri__BatchBackResponse (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__BatchBackResponse(struct soap*, const char*, int, const _tempuri__BatchBackResponse *, const char*);
SOAP_FMAC3 _tempuri__BatchBackResponse * SOAP_FMAC4 soap_in__tempuri__BatchBackResponse(struct soap*, const char*, _tempuri__BatchBackResponse *, const char*);

#ifndef soap_write__tempuri__BatchBackResponse
#define soap_write__tempuri__BatchBackResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:BatchBackResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__BatchBackResponse * SOAP_FMAC4 soap_get__tempuri__BatchBackResponse(struct soap*, _tempuri__BatchBackResponse *, const char*, const char*);

#ifndef soap_read__tempuri__BatchBackResponse
#define soap_read__tempuri__BatchBackResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__BatchBackResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__BatchBackResponse * SOAP_FMAC2 soap_instantiate__tempuri__BatchBackResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__BatchBackResponse * soap_new__tempuri__BatchBackResponse(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__BatchBackResponse(soap, n, NULL, NULL, NULL); }

inline _tempuri__BatchBackResponse * soap_new_req__tempuri__BatchBackResponse(struct soap *soap) { _tempuri__BatchBackResponse *_p = soap_instantiate__tempuri__BatchBackResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__BatchBackResponse * soap_new_set__tempuri__BatchBackResponse(struct soap *soap, std::string *BatchBackResult) { _tempuri__BatchBackResponse *_p = soap_instantiate__tempuri__BatchBackResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__BatchBackResponse::BatchBackResult = BatchBackResult; } return _p; }

inline void soap_delete__tempuri__BatchBackResponse(struct soap *soap, _tempuri__BatchBackResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__BatchBackResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__BatchBack
#define SOAP_TYPE__tempuri__BatchBack (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__BatchBack(struct soap*, const char*, int, const _tempuri__BatchBack *, const char*);
SOAP_FMAC3 _tempuri__BatchBack * SOAP_FMAC4 soap_in__tempuri__BatchBack(struct soap*, const char*, _tempuri__BatchBack *, const char*);

#ifndef soap_write__tempuri__BatchBack
#define soap_write__tempuri__BatchBack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:BatchBack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__BatchBack * SOAP_FMAC4 soap_get__tempuri__BatchBack(struct soap*, _tempuri__BatchBack *, const char*, const char*);

#ifndef soap_read__tempuri__BatchBack
#define soap_read__tempuri__BatchBack(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__BatchBack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__BatchBack * SOAP_FMAC2 soap_instantiate__tempuri__BatchBack(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__BatchBack * soap_new__tempuri__BatchBack(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__BatchBack(soap, n, NULL, NULL, NULL); }

inline _tempuri__BatchBack * soap_new_req__tempuri__BatchBack(struct soap *soap) { _tempuri__BatchBack *_p = soap_instantiate__tempuri__BatchBack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__BatchBack * soap_new_set__tempuri__BatchBack(struct soap *soap, std::string *strQA_USCORENO) { _tempuri__BatchBack *_p = soap_instantiate__tempuri__BatchBack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__BatchBack::strQA_USCORENO = strQA_USCORENO; } return _p; }

inline void soap_delete__tempuri__BatchBack(struct soap *soap, _tempuri__BatchBack *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__BatchBack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response
#define SOAP_TYPE__tempuri__UpdateSMTSteelNet2Response (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__UpdateSMTSteelNet2Response(struct soap*, const char*, int, const _tempuri__UpdateSMTSteelNet2Response *, const char*);
SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2Response * SOAP_FMAC4 soap_in__tempuri__UpdateSMTSteelNet2Response(struct soap*, const char*, _tempuri__UpdateSMTSteelNet2Response *, const char*);

#ifndef soap_write__tempuri__UpdateSMTSteelNet2Response
#define soap_write__tempuri__UpdateSMTSteelNet2Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:UpdateSMTSteelNet2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2Response * SOAP_FMAC4 soap_get__tempuri__UpdateSMTSteelNet2Response(struct soap*, _tempuri__UpdateSMTSteelNet2Response *, const char*, const char*);

#ifndef soap_read__tempuri__UpdateSMTSteelNet2Response
#define soap_read__tempuri__UpdateSMTSteelNet2Response(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__UpdateSMTSteelNet2Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__UpdateSMTSteelNet2Response * SOAP_FMAC2 soap_instantiate__tempuri__UpdateSMTSteelNet2Response(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__UpdateSMTSteelNet2Response * soap_new__tempuri__UpdateSMTSteelNet2Response(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__UpdateSMTSteelNet2Response(soap, n, NULL, NULL, NULL); }

inline _tempuri__UpdateSMTSteelNet2Response * soap_new_req__tempuri__UpdateSMTSteelNet2Response(struct soap *soap) { _tempuri__UpdateSMTSteelNet2Response *_p = soap_instantiate__tempuri__UpdateSMTSteelNet2Response(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__UpdateSMTSteelNet2Response * soap_new_set__tempuri__UpdateSMTSteelNet2Response(struct soap *soap, std::string *UpdateSMTSteelNet2Result) { _tempuri__UpdateSMTSteelNet2Response *_p = soap_instantiate__tempuri__UpdateSMTSteelNet2Response(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__UpdateSMTSteelNet2Response::UpdateSMTSteelNet2Result = UpdateSMTSteelNet2Result; } return _p; }

inline void soap_delete__tempuri__UpdateSMTSteelNet2Response(struct soap *soap, _tempuri__UpdateSMTSteelNet2Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__UpdateSMTSteelNet2Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__UpdateSMTSteelNet2
#define SOAP_TYPE__tempuri__UpdateSMTSteelNet2 (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__UpdateSMTSteelNet2(struct soap*, const char*, int, const _tempuri__UpdateSMTSteelNet2 *, const char*);
SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2 * SOAP_FMAC4 soap_in__tempuri__UpdateSMTSteelNet2(struct soap*, const char*, _tempuri__UpdateSMTSteelNet2 *, const char*);

#ifndef soap_write__tempuri__UpdateSMTSteelNet2
#define soap_write__tempuri__UpdateSMTSteelNet2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:UpdateSMTSteelNet2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2 * SOAP_FMAC4 soap_get__tempuri__UpdateSMTSteelNet2(struct soap*, _tempuri__UpdateSMTSteelNet2 *, const char*, const char*);

#ifndef soap_read__tempuri__UpdateSMTSteelNet2
#define soap_read__tempuri__UpdateSMTSteelNet2(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__UpdateSMTSteelNet2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__UpdateSMTSteelNet2 * SOAP_FMAC2 soap_instantiate__tempuri__UpdateSMTSteelNet2(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__UpdateSMTSteelNet2 * soap_new__tempuri__UpdateSMTSteelNet2(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__UpdateSMTSteelNet2(soap, n, NULL, NULL, NULL); }

inline _tempuri__UpdateSMTSteelNet2 * soap_new_req__tempuri__UpdateSMTSteelNet2(struct soap *soap) { _tempuri__UpdateSMTSteelNet2 *_p = soap_instantiate__tempuri__UpdateSMTSteelNet2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__UpdateSMTSteelNet2 * soap_new_set__tempuri__UpdateSMTSteelNet2(struct soap *soap, std::string *strMO, int *intLINECODE) { _tempuri__UpdateSMTSteelNet2 *_p = soap_instantiate__tempuri__UpdateSMTSteelNet2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__UpdateSMTSteelNet2::strMO = strMO; _p->_tempuri__UpdateSMTSteelNet2::intLINECODE = intLINECODE; } return _p; }

inline void soap_delete__tempuri__UpdateSMTSteelNet2(struct soap *soap, _tempuri__UpdateSMTSteelNet2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__UpdateSMTSteelNet2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse
#define SOAP_TYPE__tempuri__UpdateSMTSteelNetResponse (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__UpdateSMTSteelNetResponse(struct soap*, const char*, int, const _tempuri__UpdateSMTSteelNetResponse *, const char*);
SOAP_FMAC3 _tempuri__UpdateSMTSteelNetResponse * SOAP_FMAC4 soap_in__tempuri__UpdateSMTSteelNetResponse(struct soap*, const char*, _tempuri__UpdateSMTSteelNetResponse *, const char*);

#ifndef soap_write__tempuri__UpdateSMTSteelNetResponse
#define soap_write__tempuri__UpdateSMTSteelNetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:UpdateSMTSteelNetResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__UpdateSMTSteelNetResponse * SOAP_FMAC4 soap_get__tempuri__UpdateSMTSteelNetResponse(struct soap*, _tempuri__UpdateSMTSteelNetResponse *, const char*, const char*);

#ifndef soap_read__tempuri__UpdateSMTSteelNetResponse
#define soap_read__tempuri__UpdateSMTSteelNetResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__UpdateSMTSteelNetResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__UpdateSMTSteelNetResponse * SOAP_FMAC2 soap_instantiate__tempuri__UpdateSMTSteelNetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__UpdateSMTSteelNetResponse * soap_new__tempuri__UpdateSMTSteelNetResponse(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__UpdateSMTSteelNetResponse(soap, n, NULL, NULL, NULL); }

inline _tempuri__UpdateSMTSteelNetResponse * soap_new_req__tempuri__UpdateSMTSteelNetResponse(struct soap *soap) { _tempuri__UpdateSMTSteelNetResponse *_p = soap_instantiate__tempuri__UpdateSMTSteelNetResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__UpdateSMTSteelNetResponse * soap_new_set__tempuri__UpdateSMTSteelNetResponse(struct soap *soap, std::string *UpdateSMTSteelNetResult) { _tempuri__UpdateSMTSteelNetResponse *_p = soap_instantiate__tempuri__UpdateSMTSteelNetResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__UpdateSMTSteelNetResponse::UpdateSMTSteelNetResult = UpdateSMTSteelNetResult; } return _p; }

inline void soap_delete__tempuri__UpdateSMTSteelNetResponse(struct soap *soap, _tempuri__UpdateSMTSteelNetResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__UpdateSMTSteelNetResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__UpdateSMTSteelNet
#define SOAP_TYPE__tempuri__UpdateSMTSteelNet (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__UpdateSMTSteelNet(struct soap*, const char*, int, const _tempuri__UpdateSMTSteelNet *, const char*);
SOAP_FMAC3 _tempuri__UpdateSMTSteelNet * SOAP_FMAC4 soap_in__tempuri__UpdateSMTSteelNet(struct soap*, const char*, _tempuri__UpdateSMTSteelNet *, const char*);

#ifndef soap_write__tempuri__UpdateSMTSteelNet
#define soap_write__tempuri__UpdateSMTSteelNet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:UpdateSMTSteelNet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet * SOAP_FMAC4 soap_get__tempuri__UpdateSMTSteelNet(struct soap*, _tempuri__UpdateSMTSteelNet *, const char*, const char*);

#ifndef soap_read__tempuri__UpdateSMTSteelNet
#define soap_read__tempuri__UpdateSMTSteelNet(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__UpdateSMTSteelNet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__UpdateSMTSteelNet * SOAP_FMAC2 soap_instantiate__tempuri__UpdateSMTSteelNet(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__UpdateSMTSteelNet * soap_new__tempuri__UpdateSMTSteelNet(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__UpdateSMTSteelNet(soap, n, NULL, NULL, NULL); }

inline _tempuri__UpdateSMTSteelNet * soap_new_req__tempuri__UpdateSMTSteelNet(struct soap *soap) { _tempuri__UpdateSMTSteelNet *_p = soap_instantiate__tempuri__UpdateSMTSteelNet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__UpdateSMTSteelNet * soap_new_set__tempuri__UpdateSMTSteelNet(struct soap *soap, std::string *strMO, int *intLINECODE) { _tempuri__UpdateSMTSteelNet *_p = soap_instantiate__tempuri__UpdateSMTSteelNet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__UpdateSMTSteelNet::strMO = strMO; _p->_tempuri__UpdateSMTSteelNet::intLINECODE = intLINECODE; } return _p; }

inline void soap_delete__tempuri__UpdateSMTSteelNet(struct soap *soap, _tempuri__UpdateSMTSteelNet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__UpdateSMTSteelNet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse
#define SOAP_TYPE__tempuri__COMMAND_USCORECODEResponse (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__COMMAND_USCORECODEResponse(struct soap*, const char*, int, const _tempuri__COMMAND_USCORECODEResponse *, const char*);
SOAP_FMAC3 _tempuri__COMMAND_USCORECODEResponse * SOAP_FMAC4 soap_in__tempuri__COMMAND_USCORECODEResponse(struct soap*, const char*, _tempuri__COMMAND_USCORECODEResponse *, const char*);

#ifndef soap_write__tempuri__COMMAND_USCORECODEResponse
#define soap_write__tempuri__COMMAND_USCORECODEResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:COMMAND_CODEResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__COMMAND_USCORECODEResponse * SOAP_FMAC4 soap_get__tempuri__COMMAND_USCORECODEResponse(struct soap*, _tempuri__COMMAND_USCORECODEResponse *, const char*, const char*);

#ifndef soap_read__tempuri__COMMAND_USCORECODEResponse
#define soap_read__tempuri__COMMAND_USCORECODEResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__COMMAND_USCORECODEResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__COMMAND_USCORECODEResponse * SOAP_FMAC2 soap_instantiate__tempuri__COMMAND_USCORECODEResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__COMMAND_USCORECODEResponse * soap_new__tempuri__COMMAND_USCORECODEResponse(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__COMMAND_USCORECODEResponse(soap, n, NULL, NULL, NULL); }

inline _tempuri__COMMAND_USCORECODEResponse * soap_new_req__tempuri__COMMAND_USCORECODEResponse(struct soap *soap) { _tempuri__COMMAND_USCORECODEResponse *_p = soap_instantiate__tempuri__COMMAND_USCORECODEResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__COMMAND_USCORECODEResponse * soap_new_set__tempuri__COMMAND_USCORECODEResponse(struct soap *soap, std::string *COMMAND_USCORECODEResult) { _tempuri__COMMAND_USCORECODEResponse *_p = soap_instantiate__tempuri__COMMAND_USCORECODEResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__COMMAND_USCORECODEResponse::COMMAND_USCORECODEResult = COMMAND_USCORECODEResult; } return _p; }

inline void soap_delete__tempuri__COMMAND_USCORECODEResponse(struct soap *soap, _tempuri__COMMAND_USCORECODEResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__COMMAND_USCORECODEResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__COMMAND_USCORECODE
#define SOAP_TYPE__tempuri__COMMAND_USCORECODE (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__COMMAND_USCORECODE(struct soap*, const char*, int, const _tempuri__COMMAND_USCORECODE *, const char*);
SOAP_FMAC3 _tempuri__COMMAND_USCORECODE * SOAP_FMAC4 soap_in__tempuri__COMMAND_USCORECODE(struct soap*, const char*, _tempuri__COMMAND_USCORECODE *, const char*);

#ifndef soap_write__tempuri__COMMAND_USCORECODE
#define soap_write__tempuri__COMMAND_USCORECODE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:COMMAND_CODE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__COMMAND_USCORECODE * SOAP_FMAC4 soap_get__tempuri__COMMAND_USCORECODE(struct soap*, _tempuri__COMMAND_USCORECODE *, const char*, const char*);

#ifndef soap_read__tempuri__COMMAND_USCORECODE
#define soap_read__tempuri__COMMAND_USCORECODE(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__COMMAND_USCORECODE(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__COMMAND_USCORECODE * SOAP_FMAC2 soap_instantiate__tempuri__COMMAND_USCORECODE(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__COMMAND_USCORECODE * soap_new__tempuri__COMMAND_USCORECODE(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__COMMAND_USCORECODE(soap, n, NULL, NULL, NULL); }

inline _tempuri__COMMAND_USCORECODE * soap_new_req__tempuri__COMMAND_USCORECODE(struct soap *soap) { _tempuri__COMMAND_USCORECODE *_p = soap_instantiate__tempuri__COMMAND_USCORECODE(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__COMMAND_USCORECODE * soap_new_set__tempuri__COMMAND_USCORECODE(struct soap *soap, std::string *CMD1, std::string *CMD2, std::string *CMD3, std::string *CMD4, std::string *CMD5, std::string *CMD6, std::string *CMD7, std::string *TSTATION) { _tempuri__COMMAND_USCORECODE *_p = soap_instantiate__tempuri__COMMAND_USCORECODE(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__COMMAND_USCORECODE::CMD1 = CMD1; _p->_tempuri__COMMAND_USCORECODE::CMD2 = CMD2; _p->_tempuri__COMMAND_USCORECODE::CMD3 = CMD3; _p->_tempuri__COMMAND_USCORECODE::CMD4 = CMD4; _p->_tempuri__COMMAND_USCORECODE::CMD5 = CMD5; _p->_tempuri__COMMAND_USCORECODE::CMD6 = CMD6; _p->_tempuri__COMMAND_USCORECODE::CMD7 = CMD7; _p->_tempuri__COMMAND_USCORECODE::TSTATION = TSTATION; } return _p; }

inline void soap_delete__tempuri__COMMAND_USCORECODE(struct soap *soap, _tempuri__COMMAND_USCORECODE *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__COMMAND_USCORECODE(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__CheckRuleSNResponse
#define SOAP_TYPE__tempuri__CheckRuleSNResponse (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__CheckRuleSNResponse(struct soap*, const char*, int, const _tempuri__CheckRuleSNResponse *, const char*);
SOAP_FMAC3 _tempuri__CheckRuleSNResponse * SOAP_FMAC4 soap_in__tempuri__CheckRuleSNResponse(struct soap*, const char*, _tempuri__CheckRuleSNResponse *, const char*);

#ifndef soap_write__tempuri__CheckRuleSNResponse
#define soap_write__tempuri__CheckRuleSNResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:CheckRuleSNResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__CheckRuleSNResponse * SOAP_FMAC4 soap_get__tempuri__CheckRuleSNResponse(struct soap*, _tempuri__CheckRuleSNResponse *, const char*, const char*);

#ifndef soap_read__tempuri__CheckRuleSNResponse
#define soap_read__tempuri__CheckRuleSNResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__CheckRuleSNResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__CheckRuleSNResponse * SOAP_FMAC2 soap_instantiate__tempuri__CheckRuleSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__CheckRuleSNResponse * soap_new__tempuri__CheckRuleSNResponse(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__CheckRuleSNResponse(soap, n, NULL, NULL, NULL); }

inline _tempuri__CheckRuleSNResponse * soap_new_req__tempuri__CheckRuleSNResponse(struct soap *soap) { _tempuri__CheckRuleSNResponse *_p = soap_instantiate__tempuri__CheckRuleSNResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__CheckRuleSNResponse * soap_new_set__tempuri__CheckRuleSNResponse(struct soap *soap, std::string *CheckRuleSNResult) { _tempuri__CheckRuleSNResponse *_p = soap_instantiate__tempuri__CheckRuleSNResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__CheckRuleSNResponse::CheckRuleSNResult = CheckRuleSNResult; } return _p; }

inline void soap_delete__tempuri__CheckRuleSNResponse(struct soap *soap, _tempuri__CheckRuleSNResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__CheckRuleSNResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tempuri__CheckRuleSN
#define SOAP_TYPE__tempuri__CheckRuleSN (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__CheckRuleSN(struct soap*, const char*, int, const _tempuri__CheckRuleSN *, const char*);
SOAP_FMAC3 _tempuri__CheckRuleSN * SOAP_FMAC4 soap_in__tempuri__CheckRuleSN(struct soap*, const char*, _tempuri__CheckRuleSN *, const char*);

#ifndef soap_write__tempuri__CheckRuleSN
#define soap_write__tempuri__CheckRuleSN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tempuri:CheckRuleSN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__CheckRuleSN * SOAP_FMAC4 soap_get__tempuri__CheckRuleSN(struct soap*, _tempuri__CheckRuleSN *, const char*, const char*);

#ifndef soap_read__tempuri__CheckRuleSN
#define soap_read__tempuri__CheckRuleSN(soap, data) ( soap_begin_recv(soap) || !soap_get__tempuri__CheckRuleSN(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tempuri__CheckRuleSN * SOAP_FMAC2 soap_instantiate__tempuri__CheckRuleSN(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__CheckRuleSN * soap_new__tempuri__CheckRuleSN(struct soap *soap, int n = -1) { return soap_instantiate__tempuri__CheckRuleSN(soap, n, NULL, NULL, NULL); }

inline _tempuri__CheckRuleSN * soap_new_req__tempuri__CheckRuleSN(struct soap *soap) { _tempuri__CheckRuleSN *_p = soap_instantiate__tempuri__CheckRuleSN(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tempuri__CheckRuleSN * soap_new_set__tempuri__CheckRuleSN(struct soap *soap, std::string *TPART_USCORENO, std::string *TSN, std::string *TTYPE) { _tempuri__CheckRuleSN *_p = soap_instantiate__tempuri__CheckRuleSN(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tempuri__CheckRuleSN::TPART_USCORENO = TPART_USCORENO; _p->_tempuri__CheckRuleSN::TSN = TSN; _p->_tempuri__CheckRuleSN::TTYPE = TTYPE; } return _p; }

inline void soap_delete__tempuri__CheckRuleSN(struct soap *soap, _tempuri__CheckRuleSN *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__CheckRuleSN(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___tempuri__SaveTestData
#define SOAP_TYPE___tempuri__SaveTestData (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SaveTestData(struct soap*, struct __tempuri__SaveTestData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SaveTestData(struct soap*, const struct __tempuri__SaveTestData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SaveTestData(struct soap*, const char*, int, const struct __tempuri__SaveTestData *, const char*);
SOAP_FMAC3 struct __tempuri__SaveTestData * SOAP_FMAC4 soap_in___tempuri__SaveTestData(struct soap*, const char*, struct __tempuri__SaveTestData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SaveTestData(struct soap*, const struct __tempuri__SaveTestData *, const char*, const char*);

#ifndef soap_write___tempuri__SaveTestData
#define soap_write___tempuri__SaveTestData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__SaveTestData(soap, data), 0) || soap_put___tempuri__SaveTestData(soap, data, "-tempuri:SaveTestData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__SaveTestData * SOAP_FMAC4 soap_get___tempuri__SaveTestData(struct soap*, struct __tempuri__SaveTestData *, const char*, const char*);

#ifndef soap_read___tempuri__SaveTestData
#define soap_read___tempuri__SaveTestData(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__SaveTestData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__SaveTestData * SOAP_FMAC2 soap_instantiate___tempuri__SaveTestData(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__SaveTestData * soap_new___tempuri__SaveTestData(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__SaveTestData(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__SaveTestData * soap_new_req___tempuri__SaveTestData(struct soap *soap) { struct __tempuri__SaveTestData *_p = soap_instantiate___tempuri__SaveTestData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__SaveTestData(soap, _p); } return _p; }

inline struct __tempuri__SaveTestData * soap_new_set___tempuri__SaveTestData(struct soap *soap, _tempuri__SaveTestData *tempuri__SaveTestData) { struct __tempuri__SaveTestData *_p = soap_instantiate___tempuri__SaveTestData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__SaveTestData(soap, _p); _p->tempuri__SaveTestData = tempuri__SaveTestData; } return _p; }

inline void soap_delete___tempuri__SaveTestData(struct soap *soap, struct __tempuri__SaveTestData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__SaveTestData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___tempuri__Check_USCORELogin
#define SOAP_TYPE___tempuri__Check_USCORELogin (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Check_USCORELogin(struct soap*, struct __tempuri__Check_USCORELogin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Check_USCORELogin(struct soap*, const struct __tempuri__Check_USCORELogin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Check_USCORELogin(struct soap*, const char*, int, const struct __tempuri__Check_USCORELogin *, const char*);
SOAP_FMAC3 struct __tempuri__Check_USCORELogin * SOAP_FMAC4 soap_in___tempuri__Check_USCORELogin(struct soap*, const char*, struct __tempuri__Check_USCORELogin *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Check_USCORELogin(struct soap*, const struct __tempuri__Check_USCORELogin *, const char*, const char*);

#ifndef soap_write___tempuri__Check_USCORELogin
#define soap_write___tempuri__Check_USCORELogin(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__Check_USCORELogin(soap, data), 0) || soap_put___tempuri__Check_USCORELogin(soap, data, "-tempuri:Check_Login", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__Check_USCORELogin * SOAP_FMAC4 soap_get___tempuri__Check_USCORELogin(struct soap*, struct __tempuri__Check_USCORELogin *, const char*, const char*);

#ifndef soap_read___tempuri__Check_USCORELogin
#define soap_read___tempuri__Check_USCORELogin(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__Check_USCORELogin(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__Check_USCORELogin * SOAP_FMAC2 soap_instantiate___tempuri__Check_USCORELogin(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Check_USCORELogin * soap_new___tempuri__Check_USCORELogin(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__Check_USCORELogin(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__Check_USCORELogin * soap_new_req___tempuri__Check_USCORELogin(struct soap *soap) { struct __tempuri__Check_USCORELogin *_p = soap_instantiate___tempuri__Check_USCORELogin(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__Check_USCORELogin(soap, _p); } return _p; }

inline struct __tempuri__Check_USCORELogin * soap_new_set___tempuri__Check_USCORELogin(struct soap *soap, _tempuri__Check_USCORELogin *tempuri__Check_USCORELogin) { struct __tempuri__Check_USCORELogin *_p = soap_instantiate___tempuri__Check_USCORELogin(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__Check_USCORELogin(soap, _p); _p->tempuri__Check_USCORELogin = tempuri__Check_USCORELogin; } return _p; }

inline void soap_delete___tempuri__Check_USCORELogin(struct soap *soap, struct __tempuri__Check_USCORELogin *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Check_USCORELogin(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___tempuri__saveSingleReworkResult
#define SOAP_TYPE___tempuri__saveSingleReworkResult (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__saveSingleReworkResult(struct soap*, struct __tempuri__saveSingleReworkResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__saveSingleReworkResult(struct soap*, const struct __tempuri__saveSingleReworkResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__saveSingleReworkResult(struct soap*, const char*, int, const struct __tempuri__saveSingleReworkResult *, const char*);
SOAP_FMAC3 struct __tempuri__saveSingleReworkResult * SOAP_FMAC4 soap_in___tempuri__saveSingleReworkResult(struct soap*, const char*, struct __tempuri__saveSingleReworkResult *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__saveSingleReworkResult(struct soap*, const struct __tempuri__saveSingleReworkResult *, const char*, const char*);

#ifndef soap_write___tempuri__saveSingleReworkResult
#define soap_write___tempuri__saveSingleReworkResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__saveSingleReworkResult(soap, data), 0) || soap_put___tempuri__saveSingleReworkResult(soap, data, "-tempuri:saveSingleReworkResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__saveSingleReworkResult * SOAP_FMAC4 soap_get___tempuri__saveSingleReworkResult(struct soap*, struct __tempuri__saveSingleReworkResult *, const char*, const char*);

#ifndef soap_read___tempuri__saveSingleReworkResult
#define soap_read___tempuri__saveSingleReworkResult(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__saveSingleReworkResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__saveSingleReworkResult * SOAP_FMAC2 soap_instantiate___tempuri__saveSingleReworkResult(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__saveSingleReworkResult * soap_new___tempuri__saveSingleReworkResult(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__saveSingleReworkResult(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__saveSingleReworkResult * soap_new_req___tempuri__saveSingleReworkResult(struct soap *soap) { struct __tempuri__saveSingleReworkResult *_p = soap_instantiate___tempuri__saveSingleReworkResult(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__saveSingleReworkResult(soap, _p); } return _p; }

inline struct __tempuri__saveSingleReworkResult * soap_new_set___tempuri__saveSingleReworkResult(struct soap *soap, _tempuri__saveSingleReworkResult *tempuri__saveSingleReworkResult) { struct __tempuri__saveSingleReworkResult *_p = soap_instantiate___tempuri__saveSingleReworkResult(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__saveSingleReworkResult(soap, _p); _p->tempuri__saveSingleReworkResult = tempuri__saveSingleReworkResult; } return _p; }

inline void soap_delete___tempuri__saveSingleReworkResult(struct soap *soap, struct __tempuri__saveSingleReworkResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__saveSingleReworkResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___tempuri__BatchBack
#define SOAP_TYPE___tempuri__BatchBack (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__BatchBack(struct soap*, struct __tempuri__BatchBack *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__BatchBack(struct soap*, const struct __tempuri__BatchBack *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__BatchBack(struct soap*, const char*, int, const struct __tempuri__BatchBack *, const char*);
SOAP_FMAC3 struct __tempuri__BatchBack * SOAP_FMAC4 soap_in___tempuri__BatchBack(struct soap*, const char*, struct __tempuri__BatchBack *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__BatchBack(struct soap*, const struct __tempuri__BatchBack *, const char*, const char*);

#ifndef soap_write___tempuri__BatchBack
#define soap_write___tempuri__BatchBack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__BatchBack(soap, data), 0) || soap_put___tempuri__BatchBack(soap, data, "-tempuri:BatchBack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__BatchBack * SOAP_FMAC4 soap_get___tempuri__BatchBack(struct soap*, struct __tempuri__BatchBack *, const char*, const char*);

#ifndef soap_read___tempuri__BatchBack
#define soap_read___tempuri__BatchBack(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__BatchBack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__BatchBack * SOAP_FMAC2 soap_instantiate___tempuri__BatchBack(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__BatchBack * soap_new___tempuri__BatchBack(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__BatchBack(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__BatchBack * soap_new_req___tempuri__BatchBack(struct soap *soap) { struct __tempuri__BatchBack *_p = soap_instantiate___tempuri__BatchBack(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__BatchBack(soap, _p); } return _p; }

inline struct __tempuri__BatchBack * soap_new_set___tempuri__BatchBack(struct soap *soap, _tempuri__BatchBack *tempuri__BatchBack) { struct __tempuri__BatchBack *_p = soap_instantiate___tempuri__BatchBack(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__BatchBack(soap, _p); _p->tempuri__BatchBack = tempuri__BatchBack; } return _p; }

inline void soap_delete___tempuri__BatchBack(struct soap *soap, struct __tempuri__BatchBack *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__BatchBack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___tempuri__UpdateSMTSteelNet2
#define SOAP_TYPE___tempuri__UpdateSMTSteelNet2 (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__UpdateSMTSteelNet2(struct soap*, struct __tempuri__UpdateSMTSteelNet2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__UpdateSMTSteelNet2(struct soap*, const struct __tempuri__UpdateSMTSteelNet2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__UpdateSMTSteelNet2(struct soap*, const char*, int, const struct __tempuri__UpdateSMTSteelNet2 *, const char*);
SOAP_FMAC3 struct __tempuri__UpdateSMTSteelNet2 * SOAP_FMAC4 soap_in___tempuri__UpdateSMTSteelNet2(struct soap*, const char*, struct __tempuri__UpdateSMTSteelNet2 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__UpdateSMTSteelNet2(struct soap*, const struct __tempuri__UpdateSMTSteelNet2 *, const char*, const char*);

#ifndef soap_write___tempuri__UpdateSMTSteelNet2
#define soap_write___tempuri__UpdateSMTSteelNet2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__UpdateSMTSteelNet2(soap, data), 0) || soap_put___tempuri__UpdateSMTSteelNet2(soap, data, "-tempuri:UpdateSMTSteelNet2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__UpdateSMTSteelNet2 * SOAP_FMAC4 soap_get___tempuri__UpdateSMTSteelNet2(struct soap*, struct __tempuri__UpdateSMTSteelNet2 *, const char*, const char*);

#ifndef soap_read___tempuri__UpdateSMTSteelNet2
#define soap_read___tempuri__UpdateSMTSteelNet2(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__UpdateSMTSteelNet2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__UpdateSMTSteelNet2 * SOAP_FMAC2 soap_instantiate___tempuri__UpdateSMTSteelNet2(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__UpdateSMTSteelNet2 * soap_new___tempuri__UpdateSMTSteelNet2(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__UpdateSMTSteelNet2(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__UpdateSMTSteelNet2 * soap_new_req___tempuri__UpdateSMTSteelNet2(struct soap *soap) { struct __tempuri__UpdateSMTSteelNet2 *_p = soap_instantiate___tempuri__UpdateSMTSteelNet2(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__UpdateSMTSteelNet2(soap, _p); } return _p; }

inline struct __tempuri__UpdateSMTSteelNet2 * soap_new_set___tempuri__UpdateSMTSteelNet2(struct soap *soap, _tempuri__UpdateSMTSteelNet2 *tempuri__UpdateSMTSteelNet2) { struct __tempuri__UpdateSMTSteelNet2 *_p = soap_instantiate___tempuri__UpdateSMTSteelNet2(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__UpdateSMTSteelNet2(soap, _p); _p->tempuri__UpdateSMTSteelNet2 = tempuri__UpdateSMTSteelNet2; } return _p; }

inline void soap_delete___tempuri__UpdateSMTSteelNet2(struct soap *soap, struct __tempuri__UpdateSMTSteelNet2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__UpdateSMTSteelNet2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___tempuri__UpdateSMTSteelNet
#define SOAP_TYPE___tempuri__UpdateSMTSteelNet (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__UpdateSMTSteelNet(struct soap*, struct __tempuri__UpdateSMTSteelNet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__UpdateSMTSteelNet(struct soap*, const struct __tempuri__UpdateSMTSteelNet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__UpdateSMTSteelNet(struct soap*, const char*, int, const struct __tempuri__UpdateSMTSteelNet *, const char*);
SOAP_FMAC3 struct __tempuri__UpdateSMTSteelNet * SOAP_FMAC4 soap_in___tempuri__UpdateSMTSteelNet(struct soap*, const char*, struct __tempuri__UpdateSMTSteelNet *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__UpdateSMTSteelNet(struct soap*, const struct __tempuri__UpdateSMTSteelNet *, const char*, const char*);

#ifndef soap_write___tempuri__UpdateSMTSteelNet
#define soap_write___tempuri__UpdateSMTSteelNet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__UpdateSMTSteelNet(soap, data), 0) || soap_put___tempuri__UpdateSMTSteelNet(soap, data, "-tempuri:UpdateSMTSteelNet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__UpdateSMTSteelNet * SOAP_FMAC4 soap_get___tempuri__UpdateSMTSteelNet(struct soap*, struct __tempuri__UpdateSMTSteelNet *, const char*, const char*);

#ifndef soap_read___tempuri__UpdateSMTSteelNet
#define soap_read___tempuri__UpdateSMTSteelNet(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__UpdateSMTSteelNet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__UpdateSMTSteelNet * SOAP_FMAC2 soap_instantiate___tempuri__UpdateSMTSteelNet(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__UpdateSMTSteelNet * soap_new___tempuri__UpdateSMTSteelNet(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__UpdateSMTSteelNet(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__UpdateSMTSteelNet * soap_new_req___tempuri__UpdateSMTSteelNet(struct soap *soap) { struct __tempuri__UpdateSMTSteelNet *_p = soap_instantiate___tempuri__UpdateSMTSteelNet(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__UpdateSMTSteelNet(soap, _p); } return _p; }

inline struct __tempuri__UpdateSMTSteelNet * soap_new_set___tempuri__UpdateSMTSteelNet(struct soap *soap, _tempuri__UpdateSMTSteelNet *tempuri__UpdateSMTSteelNet) { struct __tempuri__UpdateSMTSteelNet *_p = soap_instantiate___tempuri__UpdateSMTSteelNet(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__UpdateSMTSteelNet(soap, _p); _p->tempuri__UpdateSMTSteelNet = tempuri__UpdateSMTSteelNet; } return _p; }

inline void soap_delete___tempuri__UpdateSMTSteelNet(struct soap *soap, struct __tempuri__UpdateSMTSteelNet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__UpdateSMTSteelNet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___tempuri__COMMAND_USCORECODE
#define SOAP_TYPE___tempuri__COMMAND_USCORECODE (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__COMMAND_USCORECODE(struct soap*, struct __tempuri__COMMAND_USCORECODE *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__COMMAND_USCORECODE(struct soap*, const struct __tempuri__COMMAND_USCORECODE *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__COMMAND_USCORECODE(struct soap*, const char*, int, const struct __tempuri__COMMAND_USCORECODE *, const char*);
SOAP_FMAC3 struct __tempuri__COMMAND_USCORECODE * SOAP_FMAC4 soap_in___tempuri__COMMAND_USCORECODE(struct soap*, const char*, struct __tempuri__COMMAND_USCORECODE *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__COMMAND_USCORECODE(struct soap*, const struct __tempuri__COMMAND_USCORECODE *, const char*, const char*);

#ifndef soap_write___tempuri__COMMAND_USCORECODE
#define soap_write___tempuri__COMMAND_USCORECODE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__COMMAND_USCORECODE(soap, data), 0) || soap_put___tempuri__COMMAND_USCORECODE(soap, data, "-tempuri:COMMAND_CODE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__COMMAND_USCORECODE * SOAP_FMAC4 soap_get___tempuri__COMMAND_USCORECODE(struct soap*, struct __tempuri__COMMAND_USCORECODE *, const char*, const char*);

#ifndef soap_read___tempuri__COMMAND_USCORECODE
#define soap_read___tempuri__COMMAND_USCORECODE(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__COMMAND_USCORECODE(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__COMMAND_USCORECODE * SOAP_FMAC2 soap_instantiate___tempuri__COMMAND_USCORECODE(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__COMMAND_USCORECODE * soap_new___tempuri__COMMAND_USCORECODE(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__COMMAND_USCORECODE(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__COMMAND_USCORECODE * soap_new_req___tempuri__COMMAND_USCORECODE(struct soap *soap) { struct __tempuri__COMMAND_USCORECODE *_p = soap_instantiate___tempuri__COMMAND_USCORECODE(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__COMMAND_USCORECODE(soap, _p); } return _p; }

inline struct __tempuri__COMMAND_USCORECODE * soap_new_set___tempuri__COMMAND_USCORECODE(struct soap *soap, _tempuri__COMMAND_USCORECODE *tempuri__COMMAND_USCORECODE) { struct __tempuri__COMMAND_USCORECODE *_p = soap_instantiate___tempuri__COMMAND_USCORECODE(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__COMMAND_USCORECODE(soap, _p); _p->tempuri__COMMAND_USCORECODE = tempuri__COMMAND_USCORECODE; } return _p; }

inline void soap_delete___tempuri__COMMAND_USCORECODE(struct soap *soap, struct __tempuri__COMMAND_USCORECODE *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__COMMAND_USCORECODE(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___tempuri__CheckRuleSN
#define SOAP_TYPE___tempuri__CheckRuleSN (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__CheckRuleSN(struct soap*, struct __tempuri__CheckRuleSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__CheckRuleSN(struct soap*, const struct __tempuri__CheckRuleSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__CheckRuleSN(struct soap*, const char*, int, const struct __tempuri__CheckRuleSN *, const char*);
SOAP_FMAC3 struct __tempuri__CheckRuleSN * SOAP_FMAC4 soap_in___tempuri__CheckRuleSN(struct soap*, const char*, struct __tempuri__CheckRuleSN *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__CheckRuleSN(struct soap*, const struct __tempuri__CheckRuleSN *, const char*, const char*);

#ifndef soap_write___tempuri__CheckRuleSN
#define soap_write___tempuri__CheckRuleSN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__CheckRuleSN(soap, data), 0) || soap_put___tempuri__CheckRuleSN(soap, data, "-tempuri:CheckRuleSN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__CheckRuleSN * SOAP_FMAC4 soap_get___tempuri__CheckRuleSN(struct soap*, struct __tempuri__CheckRuleSN *, const char*, const char*);

#ifndef soap_read___tempuri__CheckRuleSN
#define soap_read___tempuri__CheckRuleSN(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__CheckRuleSN(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__CheckRuleSN * SOAP_FMAC2 soap_instantiate___tempuri__CheckRuleSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__CheckRuleSN * soap_new___tempuri__CheckRuleSN(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__CheckRuleSN(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__CheckRuleSN * soap_new_req___tempuri__CheckRuleSN(struct soap *soap) { struct __tempuri__CheckRuleSN *_p = soap_instantiate___tempuri__CheckRuleSN(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__CheckRuleSN(soap, _p); } return _p; }

inline struct __tempuri__CheckRuleSN * soap_new_set___tempuri__CheckRuleSN(struct soap *soap, _tempuri__CheckRuleSN *tempuri__CheckRuleSN) { struct __tempuri__CheckRuleSN *_p = soap_instantiate___tempuri__CheckRuleSN(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__CheckRuleSN(soap, _p); _p->tempuri__CheckRuleSN = tempuri__CheckRuleSN; } return _p; }

inline void soap_delete___tempuri__CheckRuleSN(struct soap *soap, struct __tempuri__CheckRuleSN *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__CheckRuleSN(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__SaveTestData
#define SOAP_TYPE_PointerTo_tempuri__SaveTestData (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SaveTestData(struct soap*, _tempuri__SaveTestData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SaveTestData(struct soap*, const char *, int, _tempuri__SaveTestData *const*, const char *);
SOAP_FMAC3 _tempuri__SaveTestData ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SaveTestData(struct soap*, const char*, _tempuri__SaveTestData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SaveTestData(struct soap*, _tempuri__SaveTestData *const*, const char*, const char*);

#ifndef soap_write_PointerTo_tempuri__SaveTestData
#define soap_write_PointerTo_tempuri__SaveTestData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_tempuri__SaveTestData(soap, data), 0) || soap_put_PointerTo_tempuri__SaveTestData(soap, data, "tempuri:SaveTestData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__SaveTestData ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SaveTestData(struct soap*, _tempuri__SaveTestData **, const char*, const char*);

#ifndef soap_read_PointerTo_tempuri__SaveTestData
#define soap_read_PointerTo_tempuri__SaveTestData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_tempuri__SaveTestData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_tempuri__Check_USCORELogin
#define SOAP_TYPE_PointerTo_tempuri__Check_USCORELogin (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Check_USCORELogin(struct soap*, _tempuri__Check_USCORELogin *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Check_USCORELogin(struct soap*, const char *, int, _tempuri__Check_USCORELogin *const*, const char *);
SOAP_FMAC3 _tempuri__Check_USCORELogin ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Check_USCORELogin(struct soap*, const char*, _tempuri__Check_USCORELogin **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Check_USCORELogin(struct soap*, _tempuri__Check_USCORELogin *const*, const char*, const char*);

#ifndef soap_write_PointerTo_tempuri__Check_USCORELogin
#define soap_write_PointerTo_tempuri__Check_USCORELogin(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_tempuri__Check_USCORELogin(soap, data), 0) || soap_put_PointerTo_tempuri__Check_USCORELogin(soap, data, "tempuri:Check_Login", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__Check_USCORELogin ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Check_USCORELogin(struct soap*, _tempuri__Check_USCORELogin **, const char*, const char*);

#ifndef soap_read_PointerTo_tempuri__Check_USCORELogin
#define soap_read_PointerTo_tempuri__Check_USCORELogin(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_tempuri__Check_USCORELogin(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_tempuri__saveSingleReworkResult
#define SOAP_TYPE_PointerTo_tempuri__saveSingleReworkResult (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__saveSingleReworkResult(struct soap*, _tempuri__saveSingleReworkResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__saveSingleReworkResult(struct soap*, const char *, int, _tempuri__saveSingleReworkResult *const*, const char *);
SOAP_FMAC3 _tempuri__saveSingleReworkResult ** SOAP_FMAC4 soap_in_PointerTo_tempuri__saveSingleReworkResult(struct soap*, const char*, _tempuri__saveSingleReworkResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__saveSingleReworkResult(struct soap*, _tempuri__saveSingleReworkResult *const*, const char*, const char*);

#ifndef soap_write_PointerTo_tempuri__saveSingleReworkResult
#define soap_write_PointerTo_tempuri__saveSingleReworkResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_tempuri__saveSingleReworkResult(soap, data), 0) || soap_put_PointerTo_tempuri__saveSingleReworkResult(soap, data, "tempuri:saveSingleReworkResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__saveSingleReworkResult ** SOAP_FMAC4 soap_get_PointerTo_tempuri__saveSingleReworkResult(struct soap*, _tempuri__saveSingleReworkResult **, const char*, const char*);

#ifndef soap_read_PointerTo_tempuri__saveSingleReworkResult
#define soap_read_PointerTo_tempuri__saveSingleReworkResult(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_tempuri__saveSingleReworkResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_tempuri__BatchBack
#define SOAP_TYPE_PointerTo_tempuri__BatchBack (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__BatchBack(struct soap*, _tempuri__BatchBack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__BatchBack(struct soap*, const char *, int, _tempuri__BatchBack *const*, const char *);
SOAP_FMAC3 _tempuri__BatchBack ** SOAP_FMAC4 soap_in_PointerTo_tempuri__BatchBack(struct soap*, const char*, _tempuri__BatchBack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__BatchBack(struct soap*, _tempuri__BatchBack *const*, const char*, const char*);

#ifndef soap_write_PointerTo_tempuri__BatchBack
#define soap_write_PointerTo_tempuri__BatchBack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_tempuri__BatchBack(soap, data), 0) || soap_put_PointerTo_tempuri__BatchBack(soap, data, "tempuri:BatchBack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__BatchBack ** SOAP_FMAC4 soap_get_PointerTo_tempuri__BatchBack(struct soap*, _tempuri__BatchBack **, const char*, const char*);

#ifndef soap_read_PointerTo_tempuri__BatchBack
#define soap_read_PointerTo_tempuri__BatchBack(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_tempuri__BatchBack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet2
#define SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet2 (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__UpdateSMTSteelNet2(struct soap*, _tempuri__UpdateSMTSteelNet2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__UpdateSMTSteelNet2(struct soap*, const char *, int, _tempuri__UpdateSMTSteelNet2 *const*, const char *);
SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2 ** SOAP_FMAC4 soap_in_PointerTo_tempuri__UpdateSMTSteelNet2(struct soap*, const char*, _tempuri__UpdateSMTSteelNet2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__UpdateSMTSteelNet2(struct soap*, _tempuri__UpdateSMTSteelNet2 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_tempuri__UpdateSMTSteelNet2
#define soap_write_PointerTo_tempuri__UpdateSMTSteelNet2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_tempuri__UpdateSMTSteelNet2(soap, data), 0) || soap_put_PointerTo_tempuri__UpdateSMTSteelNet2(soap, data, "tempuri:UpdateSMTSteelNet2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet2 ** SOAP_FMAC4 soap_get_PointerTo_tempuri__UpdateSMTSteelNet2(struct soap*, _tempuri__UpdateSMTSteelNet2 **, const char*, const char*);

#ifndef soap_read_PointerTo_tempuri__UpdateSMTSteelNet2
#define soap_read_PointerTo_tempuri__UpdateSMTSteelNet2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_tempuri__UpdateSMTSteelNet2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet
#define SOAP_TYPE_PointerTo_tempuri__UpdateSMTSteelNet (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__UpdateSMTSteelNet(struct soap*, _tempuri__UpdateSMTSteelNet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__UpdateSMTSteelNet(struct soap*, const char *, int, _tempuri__UpdateSMTSteelNet *const*, const char *);
SOAP_FMAC3 _tempuri__UpdateSMTSteelNet ** SOAP_FMAC4 soap_in_PointerTo_tempuri__UpdateSMTSteelNet(struct soap*, const char*, _tempuri__UpdateSMTSteelNet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__UpdateSMTSteelNet(struct soap*, _tempuri__UpdateSMTSteelNet *const*, const char*, const char*);

#ifndef soap_write_PointerTo_tempuri__UpdateSMTSteelNet
#define soap_write_PointerTo_tempuri__UpdateSMTSteelNet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_tempuri__UpdateSMTSteelNet(soap, data), 0) || soap_put_PointerTo_tempuri__UpdateSMTSteelNet(soap, data, "tempuri:UpdateSMTSteelNet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__UpdateSMTSteelNet ** SOAP_FMAC4 soap_get_PointerTo_tempuri__UpdateSMTSteelNet(struct soap*, _tempuri__UpdateSMTSteelNet **, const char*, const char*);

#ifndef soap_read_PointerTo_tempuri__UpdateSMTSteelNet
#define soap_read_PointerTo_tempuri__UpdateSMTSteelNet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_tempuri__UpdateSMTSteelNet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_tempuri__COMMAND_USCORECODE
#define SOAP_TYPE_PointerTo_tempuri__COMMAND_USCORECODE (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__COMMAND_USCORECODE(struct soap*, _tempuri__COMMAND_USCORECODE *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__COMMAND_USCORECODE(struct soap*, const char *, int, _tempuri__COMMAND_USCORECODE *const*, const char *);
SOAP_FMAC3 _tempuri__COMMAND_USCORECODE ** SOAP_FMAC4 soap_in_PointerTo_tempuri__COMMAND_USCORECODE(struct soap*, const char*, _tempuri__COMMAND_USCORECODE **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__COMMAND_USCORECODE(struct soap*, _tempuri__COMMAND_USCORECODE *const*, const char*, const char*);

#ifndef soap_write_PointerTo_tempuri__COMMAND_USCORECODE
#define soap_write_PointerTo_tempuri__COMMAND_USCORECODE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_tempuri__COMMAND_USCORECODE(soap, data), 0) || soap_put_PointerTo_tempuri__COMMAND_USCORECODE(soap, data, "tempuri:COMMAND_CODE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__COMMAND_USCORECODE ** SOAP_FMAC4 soap_get_PointerTo_tempuri__COMMAND_USCORECODE(struct soap*, _tempuri__COMMAND_USCORECODE **, const char*, const char*);

#ifndef soap_read_PointerTo_tempuri__COMMAND_USCORECODE
#define soap_read_PointerTo_tempuri__COMMAND_USCORECODE(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_tempuri__COMMAND_USCORECODE(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_tempuri__CheckRuleSN
#define SOAP_TYPE_PointerTo_tempuri__CheckRuleSN (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__CheckRuleSN(struct soap*, _tempuri__CheckRuleSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__CheckRuleSN(struct soap*, const char *, int, _tempuri__CheckRuleSN *const*, const char *);
SOAP_FMAC3 _tempuri__CheckRuleSN ** SOAP_FMAC4 soap_in_PointerTo_tempuri__CheckRuleSN(struct soap*, const char*, _tempuri__CheckRuleSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__CheckRuleSN(struct soap*, _tempuri__CheckRuleSN *const*, const char*, const char*);

#ifndef soap_write_PointerTo_tempuri__CheckRuleSN
#define soap_write_PointerTo_tempuri__CheckRuleSN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_tempuri__CheckRuleSN(soap, data), 0) || soap_put_PointerTo_tempuri__CheckRuleSN(soap, data, "tempuri:CheckRuleSN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tempuri__CheckRuleSN ** SOAP_FMAC4 soap_get_PointerTo_tempuri__CheckRuleSN(struct soap*, _tempuri__CheckRuleSN **, const char*, const char*);

#ifndef soap_read_PointerTo_tempuri__CheckRuleSN
#define soap_read_PointerTo_tempuri__CheckRuleSN(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_tempuri__CheckRuleSN(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data), 0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data), 0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
